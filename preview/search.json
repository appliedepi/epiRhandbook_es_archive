[{"path":"index.html","id":"section","chapter":"","heading":"","text":"","code":""},{"path":"index.html","id":"r-para-epidemiología-aplicada-y-salud-pública","chapter":"","heading":"R para epidemiología aplicada y salud pública","text":"Este manual pretende:Servir como breve guía de referencia para escribir código en RProporcionar ejemplos detallados que aborden problemas epidemiológicos.Ayudar profesionales de la epidemiología en su transición RSer accesible en entornos con baja conectividad Internet través de una versión sin conexión\nIdiomas: Inglés, Vietnamita (Tiếng Việt)\n \nEscrito y traducido por profesionales de la epidemiología, para profesionales de la epidemiologíaSomos epi’s de campo de todo el mundo, escribiendo en nuestro tiempo libre para ofrecer este recurso la comunidad. Tu apoyo y comentarios son muy bienvenidos:Cuestionario onlineEnvía un email epiRhandbook@gmail.com o un tweet @epiRhandbookEnvía problemas nuestro Repositorio Github","code":""},{"path":"index.html","id":"how-to-use-this-handbook","chapter":"","heading":"Cómo utilizar este manual","text":"Navega por las páginas del índice o utiliza el cuadro de búsquedaClica en los iconos “Copy” para copiar el códigoPuedes seguir paso paso las lecciones utilizando nuestros [datos de ejemplo][Download handbook data]Consulta la sección “Recursos” de cada página para obtener más materialVersión sin conexiónConsulta las instrucciones en la página de Descargar el Manual y los datos.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Agradecimientos","text":"Este manual ha sido elaborado mediante la colaboración de profesionales de la epidemiología de todo el mundo, basándonos en nuestra experiencia en organismos sanitarios locales, estatales, provinciales y nacionales, la Organización Mundial de la Salud (OMS), Médicos Sin Fronteras (MSF), sistemas hospitalarios e instituciones académicas.Este manual es un producto aprobado por ninguna organización específica. Aunque nos esforzamos por ser precisos, ofrecemos ninguna garantía sobre el contenido de este libro.","code":""},{"path":"index.html","id":"colaboradores","chapter":"","heading":"Colaboradores","text":"Redactor jefe: Neale BatraEquipo central del proyecto: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAutores: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinRevisores: Pat Keating, Annick Lenglet, Margot Charette, Danielly Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Wayne Enanoria, Manual Albela Miranda, Molly Mantus, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaEquipo de traducción al español: Juan Carlos Fernández-Merino, Juan Francisco Monteagudo, Ximena Tolosa, Luis Hernando Aguilar Ramirez, Ignacio Castro Aguirre, Esther Kukielka, Cristina Torró, Ana Fernández-Ayuso.Illustraciones: Calder Fong","code":""},{"path":"index.html","id":"financiación-y-apoyo","chapter":"","heading":"Financiación y apoyo","text":"El manual recibió apoyo financiaciero de TEPHINET, la red mundial de Programas de Formación en Epidemiología de Campo (FETP) través de una subvención para el desarrollo de capacidades de emergencia COVID-19.La Red de Antiguos Alumnos de (EAN) proporcionó apoyo administrativo, con un agradecimiento especial Annika Wendland. EPIET es el Programa Europeo de Formación en Epidemiología de Intervención.Un agradecimiento especial Médicos Sin Fronteras (MSF) Centro Operativo de Ámsterdam (OCA) por su apoyo durante la elaboración de este manual.Esta publicación fue respaldada por el Acuerdo de Cooperación número NU2GGH001873, financiado por los Centros para el Control y la Prevención de Enfermedades través de TEPHINET, un programa de Task Force Global Health. Su contenido es responsabilidad exclusiva de los autores y representa necesariamente las opiniones oficiales de los Centros para el Control y la Prevención de Enfermedades, el Departamento de Salud y Servicios Humanos, Task Force Global Health, Inc. o TEPHINET.","code":""},{"path":"index.html","id":"inspiración","chapter":"","heading":"Inspiración","text":"Hay multitud de tutoriales y viñetas que aportaron conocimientos para el desarrollo del contenido del manual y se acreditan en sus respectivas páginas.De manera más general, las siguientes fuentes han servido de inspiración para este manual:El proyecto “R4Epis” (una colaboración entre MSF y RECON)R Epidemics Consortium (RECON)El libro R Data Science (R4DS), en español en este enlacebookdown: Creación de libros y documentos técnicos con R MarkdownNetlify alberga este sitio web","code":""},{"path":"index.html","id":"terms-of-use-and-contribution","chapter":"","heading":"Condiciones de uso y contribución","text":"","code":""},{"path":"index.html","id":"licencia","chapter":"","heading":"Licencia","text":"Esta obra está bajo una Licencia Internacional Creative Commons Attribution-NonCommercial-ShareAlike 4.0.Los cursos académicos y los programas de formación en epidemiología pueden utilizar este manual con sus estudiantes. Si tienes preguntas sobre el uso que se le va dar, envía un correo electrónico epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"cita-sugerida","chapter":"","heading":"Cita sugerida","text":"Batra, Neale, et al. Manual de R para Epidemiología. 2021. ","code":""},{"path":"index.html","id":"contribución","chapter":"","heading":"Contribución","text":"Si quieres hacer una contribución de contenido, por favor, ponte en contacto con nosotros primero través de Github o por correo electrónico. Estamos implementando un calendario de actualizaciones y estamos creando una guía para colaboradores.Ten en cuenta que el proyecto epiRhandbook se publica con un Código de Conducta del Colaborador . Al contribuir este proyecto, te comprometes respetar sus términos.","code":""},{"path":"writing-functions-1.html","id":"writing-functions-1","chapter":"1 Escribir funciones","heading":"1 Escribir funciones","text":"","code":""},{"path":"writing-functions-1.html","id":"preparation-37","chapter":"1 Escribir funciones","heading":"1.1 Preparación","text":"","code":""},{"path":"writing-functions-1.html","id":"cargar-paquetes","chapter":"1 Escribir funciones","heading":"Cargar paquetes","text":"Este trozo de código muestra la carga de los paquetes necesarios para los análisis. En este manual destacamos p_load() de pacman, que instala el paquete si es necesario y lo carga para su uso. También puedes cargar los paquetes instalados con library() de R base. Consulta la página fundamentos de R para obtener más información sobre los paquetes de R.","code":""},{"path":"writing-functions-1.html","id":"importar-datos","chapter":"1 Escribir funciones","heading":"Importar datos","text":"Importamos los datos de casos de una epidemia de ébola simulada. Si deseas descargar los datos para seguirlos paso paso, consulta las instrucciones en la página [Descargar libro y datos]. Los datos se importan mediante la función import() del paquete rio. Consulta la página sobre importación y exportación para conocer las distintas formas de importar datos.También utilizaremos en la última parte de esta página algunos datos sobre la gripe H7N9 de 2013.","code":""},{"path":"writing-functions-1.html","id":"functions-2","chapter":"1 Escribir funciones","heading":"1.2 Funciones","text":"Las funciones son útiles en la programación, ya que permiten hacer códigos más fáciles de entender, de alguna manera más cortos y menos propensos errores (dado que hay errores en la propia función).Si llegado hasta este manual, significa que te encontrado con un sinfín de funciones ya que en R, cada operación es una llamada una función +, , , [, $, { …. Por ejemplo, x + y es lo mismo que'+'(x, y)R es uno de los lenguajes que más posibilidades ofrece para trabajar con funciones y da suficientes herramientas al usuario para escribirlas fácilmente. debemos pensar en las funciones como algo fijo en la cima o al final de la cadena de programación, R ofrece la posibilidad de utilizarlas como si fueran vectores e incluso utilizarlas dentro de otras funciones, listas…Existen muchos recursos muy avanzados sobre programación funcional y aquí sólo daremos una visión para ayudarte empezar con la programación de funciones con breves ejemplos prácticos. Te animamos visitar los enlaces de las referencias para leer más sobre el tema.","code":""},{"path":"writing-functions-1.html","id":"why-would-you-use-a-function","chapter":"1 Escribir funciones","heading":"1.3 ¿Por qué utilizar una función?","text":"Antes de responder esta pregunta, es importante tener en cuenta que ya tenido consejos para llegar escribir tus primeras funciones R en la página sobre Iteración, bucles y listas de este manual. De hecho, el uso de “/else” y bucles suele ser una parte fundamental de muchas de nuestras funciones, ya que ayudan fácilmente ampliar la aplicación de nuestro código permitiendo múltiples condiciones o iterar códigos para repetir tareas.¿Estoy repitiendo varias veces el mismo bloque de código para aplicarlo una variable o dato diferente?¿Estoy repitiendo varias veces el mismo bloque de código para aplicarlo una variable o dato diferente?Deshacerse de él, ¿acortará sustancialmente mi código general y hará que se ejecute más rápido?Deshacerse de él, ¿acortará sustancialmente mi código general y hará que se ejecute más rápido?¿Es posible que el código que escrito se utilice de nuevo pero con un valor diferente en muchos lugares del código?¿Es posible que el código que escrito se utilice de nuevo pero con un valor diferente en muchos lugares del código?Si la respuesta una de las preguntas anteriores es “SÍ”, es probable que tenga que escribir una función.","code":""},{"path":"writing-functions-1.html","id":"how-does-r-build-functions","chapter":"1 Escribir funciones","heading":"1.4 ¿Cómo construye R las funciones?","text":"Las funciones en R tienen tres componentes principales:las formals() que es la lista de argumentos que controla cómo podemos llamar la funciónlas formals() que es la lista de argumentos que controla cómo podemos llamar la funciónel body() que es el código dentro de la función, es decir, dentro de los paréntesis o después del paréntesis, dependiendo de cómo lo escribamosel body() que es el código dentro de la función, es decir, dentro de los paréntesis o después del paréntesis, dependiendo de cómo lo escribamosy,el environment() que ayudará localizar las variables de la función y determina cómo encuentra la función el valor.Una vez que hayas creado tu función, puedes verificar cada uno de estos componentes llamando la función asociada.","code":""},{"path":"writing-functions-1.html","id":"basic-syntax-and-structure","chapter":"1 Escribir funciones","heading":"1.5 Sintaxis y estructura básica","text":"Una función tendrá que ser nombrada adecuadamente para que su trabajo sea fácilmente comprensible tan pronto como leamos su nombre. En realidad, este es el caso de la mayoría de la arquitectura básica de R. Funciones como mean(), print(), summary() tienen nombres muy sencillosUna función tendrá que ser nombrada adecuadamente para que su trabajo sea fácilmente comprensible tan pronto como leamos su nombre. En realidad, este es el caso de la mayoría de la arquitectura básica de R. Funciones como mean(), print(), summary() tienen nombres muy sencillosUna función necesitará argumentos, como los datos sobre los que trabajar y otros objetos que pueden ser valores estáticos entre otras opcionesUna función necesitará argumentos, como los datos sobre los que trabajar y otros objetos que pueden ser valores estáticos entre otras opcionesY finalmente una función producirá una salida basada en su tarea principal y en los argumentos que se le han dado. Normalmente utilizaremos las funciones incorporadas como print(), return()… para producir la salida. La salida puede ser un valor lógico, un número, un carácter, un dataframe… en definitiva cualquier tipo de objeto de R.Y finalmente una función producirá una salida basada en su tarea principal y en los argumentos que se le han dado. Normalmente utilizaremos las funciones incorporadas como print(), return()… para producir la salida. La salida puede ser un valor lógico, un número, un carácter, un dataframe… en definitiva cualquier tipo de objeto de R.Básicamente se trata de la composición de una función:Podemos crear nuestra primera función que se llamará contain_covid19().continuación, podemos verificar los componentes de nuestra función recién creada.Ahora vamos probar nuestra función. Para llamar nuestra función escrita, la usas como usas todas las funciones de R, es decir, escribiendo el nombre de la función y añadiendo los argumentos necesarios.Podemos volver escribir el nombre de cada argumento por precaución. Pero sin especificarlos, el código debería funcionar ya que R tiene en memoria la posición de cada argumento. Así que mientras pongas los valores de los argumentos en el orden correcto, puedes omitir escribir los nombres de los argumentos al llamar las funciones.continuación, veamos qué ocurre si uno de los valores es \"\" o \"yes\".Si proporcionamos un argumento que es reconocido, se producirá un error:Error en contain_covid19(barrier_gest = \"sometimes\", wear_mask = \"yes\", : se pudo encontrar la función \"contain_covid19\"NOTA: Algunas funciones (la mayoría de las veces muy cortas y sencillas) pueden necesitar un nombre y pueden ser utilizadas directamente en una línea de código o dentro de otra función para realizar una tarea rápida. Se llaman funciones anónimas.Por ejemplo, continuación se muestra una primera función anónima que mantiene sólo las variables de carácter de los datos.continuación, otra función que selecciona una de cada dos observaciones de nuestro conjunto de datos (puede ser relevante cuando tenemos datos longitudinales con muchos registros por paciente, por ejemplo, después de haber ordenado por fecha o visita). En este caso, la función adecuada que se escribe fuera de dplyr sería function (x) (x%2 == 0) para aplicarla al vector que contiene todos los números de fila.Un posible código para la misma tarea sería:PRECAUCIÓN: Aunque es cierto que el uso de funciones puede ayudarnos con nuestro código, puede llevar mucho tiempo escribir algunas funciones o arreglar una si ha sido pensada fondo, escrita adecuadamente y está devolviendo errores como resultado. Por esta razón, menudo se recomienda escribir primero el código en R, asegurarse de que hace lo que pretendemos, y luego transformarlo en una función con sus tres componentes principales, como se ha indicado anteriormente.","code":"\nfunction_name <- function(argument_1, argument_2, argument_3){\n  \n           function_task\n  \n           return(output)\n}\ncontain_covid19 <- function(barrier_gest, wear_mask, get_vaccine){\n  \n                            if(barrier_gest == \"yes\" & wear_mask == \"yes\" & get_vaccine == \"yes\" ) \n       \n                            return(\"success\")\n  \n  else(\"please make sure all are yes, this pandemic has to end!\")\n}\nformals(contain_covid19)## $barrier_gest\n## \n## \n## $wear_mask\n## \n## \n## $get_vaccine\nbody(contain_covid19)## {\n##     if (barrier_gest == \"yes\" & wear_mask == \"yes\" & get_vaccine == \n##         \"yes\") \n##         return(\"success\")\n##     else (\"please make sure all are yes, this pandemic has to end!\")\n## }\nenvironment(contain_covid19)## <environment: R_GlobalEnv>\ncontain_covid19(barrier_gest = \"yes\", wear_mask = \"yes\", get_vaccine = \"yes\")## [1] \"success\"\ncontain_covid19(\"yes\", \"yes\", \"yes\")## [1] \"success\"\ncontain_covid19(barrier_gest = \"yes\", wear_mask = \"yes\", get_vaccine = \"no\")## [1] \"please make sure all are yes, this pandemic has to end!\"\ncontain_covid19(barrier_gest = \"sometimes\", wear_mask = \"yes\", get_vaccine = \"no\")\nlinelist %>% \n  dplyr::slice_head(n=10) %>%  #equivalente a la función de R base \"head\" que retorna las n primeras observaciones de un conjunto de datos.\n  select(function(x) is.character(x)) \nlinelist %>%   \n   slice_head(n=20) %>% \n   tibble::rownames_to_column() %>% # agregue índices de cada obs como rownames para ver claramente la selección final\n   filter(row_number() %%2 == 0)\nlinelist_firstobs <- head(linelist, 20)\n\nlinelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),]"},{"path":"writing-functions-1.html","id":"examples-2","chapter":"1 Escribir funciones","heading":"1.6 Ejemplos","text":"","code":""},{"path":"writing-functions-1.html","id":"devuelve-tablas-de-proporciones-para-varias-columnas","chapter":"1 Escribir funciones","heading":"Devuelve tablas de proporciones para varias columnas","text":"Sí, ya disponemos de bonitas funciones en muchos paquetes que permiten resumir la información de una manera muy fácil y agradable. Pero aún así intentaremos hacer las nuestras, en nuestros primeros pasos para acostumbrarnos escribir funciones.En este ejemplo queremos mostrar cómo la escritura de una función simple te evitaría copiar y pegar el mismo código varias veces.CONSEJO: Como se ha indicado anteriormente, es muy importante comentar las funciones como se haría en la programación general. Ten en cuenta que el objetivo de una función es hacer un código fácil de leer, más corto y más eficiente. Entonces uno debería ser capaz de entender lo que hace la función con sólo leer su nombre y debería tener más detalles leyendo los comentarios.Una segunda opción es utilizar esta función en otra través de un bucle para hacer el proceso la vez:Una forma más sencilla podría ser utilizar la base R “apply” en lugar de un “bucle ” como se expresa continuación:CONSEJO: R se define menudo como un lenguaje de programación funcional y casi siempre que ejecutas una línea de código estás utilizando algunas funciones incorporadas. Un buen hábito para sentirse más cómodo con la escritura de funciones es echar menudo un vistazo interno cómo están construidas las funciones básicas que utiliza diario. El atajo para hacerlo es seleccionar el nombre de la función y luego clicar en Ctrl+F2 o fn+F2 o Cmd+F2 (dependiendo de tu ordenador).","code":"\nproptab_multiple <- function(my_data, var_to_tab){\n  \n  #imprime el nombre de cada variable de interés antes de realizar la tabulación\n  print(var_to_tab)\n\n  with(my_data,\n       rbind( #enlazar por filas los resultados de las siguientes dos funciones \n        #tabular la variable de interés: da solo números\n          table(my_data[[var_to_tab]], useNA = \"no\"),\n          #calcular la proporción de cada variable de interés y redondear el valor a 2 decimales\n         round(prop.table(table(my_data[[var_to_tab]]))*100,2)\n         )\n       )\n}\n\n\nproptab_multiple(linelist, \"gender\")## [1] \"gender\"##            f       m\n## [1,] 2807.00 2803.00\n## [2,]   50.04   49.96\nproptab_multiple(linelist, \"age_cat\")## [1] \"age_cat\"##          0-4     5-9  10-14  15-19   20-29 30-49 50-69 70+\n## [1,] 1095.00 1095.00 941.00 743.00 1073.00   754 95.00 6.0\n## [2,]   18.87   18.87  16.22  12.81   18.49    13  1.64 0.1\nproptab_multiple(linelist, \"outcome\")## [1] \"outcome\"##        Death Recover\n## [1,] 2582.00 1983.00\n## [2,]   56.56   43.44\nfor(var_to_tab in c(\"gender\",\"age_cat\",  \"outcome\")){\n  \n  print(proptab_multiple(linelist, var_to_tab))\n  \n}## [1] \"gender\"\n##            f       m\n## [1,] 2807.00 2803.00\n## [2,]   50.04   49.96\n## [1] \"age_cat\"\n##          0-4     5-9  10-14  15-19   20-29 30-49 50-69 70+\n## [1,] 1095.00 1095.00 941.00 743.00 1073.00   754 95.00 6.0\n## [2,]   18.87   18.87  16.22  12.81   18.49    13  1.64 0.1\n## [1] \"outcome\"\n##        Death Recover\n## [1,] 2582.00 1983.00\n## [2,]   56.56   43.44"},{"path":"writing-functions-1.html","id":"using-purrr-writing-functions-that-can-be-iteratively-applied","chapter":"1 Escribir funciones","heading":"1.7 Uso de purrr: escribir funciones que se pueden aplicar de forma iterativa","text":"","code":""},{"path":"writing-functions-1.html","id":"modificar-el-tipo-de-múltiples-columnas-en-unos-datos","chapter":"1 Escribir funciones","heading":"Modificar el tipo de múltiples columnas en unos datos","text":"Digamos que muchas variables de carácter en los datos originales de linelist necesitan ser cambiadas “factor” para propósitos de análisis y trazado. En lugar de repetir el paso varias veces, podemos utilizar simplemente lapply() para realizar la transformación de todas las variables afectadas en una sola línea de código.PRECAUCIÓN: lapply() devuelve una lista, por lo que su uso puede requerir una modificación adicional como último paso.El mismo paso puede realizarse utilizando la función map_if() del paquete purrr","code":"\nlinelist_factor2 <- linelist %>%\n  purrr::map_if(is.character, as.factor)\n\n\nlinelist_factor2 %>%\n        glimpse()## List of 30\n##  $ case_id             : Factor w/ 5888 levels \"00031d\",\"00086d\",..: 2134 3022 396 4203 3084 4347 179 1241 5594 430 ...\n##  $ generation          : num [1:5888] 4 4 2 3 3 3 4 4 4 4 ...\n##  $ date_infection      : Date[1:5888], format: \"2014-05-08\" NA NA \"2014-05-04\" ...\n##  $ date_onset          : Date[1:5888], format: \"2014-05-13\" \"2014-05-13\" \"2014-05-16\" \"2014-05-18\" ...\n##  $ date_hospitalisation: Date[1:5888], format: \"2014-05-15\" \"2014-05-14\" \"2014-05-18\" \"2014-05-20\" ...\n##  $ date_outcome        : Date[1:5888], format: NA \"2014-05-18\" \"2014-05-30\" NA ...\n##  $ outcome             : Factor w/ 2 levels \"Death\",\"Recover\": NA 2 2 NA 2 2 2 1 2 1 ...\n##  $ gender              : Factor w/ 2 levels \"f\",\"m\": 2 1 2 1 2 1 1 1 2 1 ...\n##  $ age                 : num [1:5888] 2 3 56 18 3 16 16 0 61 27 ...\n##  $ age_unit            : Factor w/ 2 levels \"months\",\"years\": 2 2 2 2 2 2 2 2 2 2 ...\n##  $ age_years           : num [1:5888] 2 3 56 18 3 16 16 0 61 27 ...\n##  $ age_cat             : Factor w/ 8 levels \"0-4\",\"5-9\",\"10-14\",..: 1 1 7 4 1 4 4 1 7 5 ...\n##  $ age_cat5            : Factor w/ 18 levels \"0-4\",\"5-9\",\"10-14\",..: 1 1 12 4 1 4 4 1 13 6 ...\n##  $ hospital            : Factor w/ 6 levels \"Central Hospital\",..: 4 3 6 5 2 5 3 3 3 3 ...\n##  $ lon                 : num [1:5888] -13.2 -13.2 -13.2 -13.2 -13.2 ...\n##  $ lat                 : num [1:5888] 8.47 8.45 8.46 8.48 8.46 ...\n##  $ infector            : Factor w/ 2697 levels \"00031d\",\"002e6c\",..: 2594 NA NA 2635 180 1799 1407 195 NA NA ...\n##  $ source              : Factor w/ 2 levels \"funeral\",\"other\": 2 NA NA 2 2 2 2 2 NA NA ...\n##  $ wt_kg               : num [1:5888] 27 25 91 41 36 56 47 0 86 69 ...\n##  $ ht_cm               : num [1:5888] 48 59 238 135 71 116 87 11 226 174 ...\n##  $ ct_blood            : num [1:5888] 22 22 21 23 23 21 21 22 22 22 ...\n##  $ fever               : Factor w/ 2 levels \"no\",\"yes\": 1 NA NA 1 1 1 NA 1 1 1 ...\n##  $ chills              : Factor w/ 2 levels \"no\",\"yes\": 1 NA NA 1 1 1 NA 1 1 1 ...\n##  $ cough               : Factor w/ 2 levels \"no\",\"yes\": 2 NA NA 1 2 2 NA 2 2 2 ...\n##  $ aches               : Factor w/ 2 levels \"no\",\"yes\": 1 NA NA 1 1 1 NA 1 1 1 ...\n##  $ vomit               : Factor w/ 2 levels \"no\",\"yes\": 2 NA NA 1 2 2 NA 2 2 1 ...\n##  $ temp                : num [1:5888] 36.8 36.9 36.9 36.8 36.9 37.6 37.3 37 36.4 35.9 ...\n##  $ time_admission      : Factor w/ 1072 levels \"00:10\",\"00:29\",..: NA 308 746 415 514 589 609 297 409 387 ...\n##  $ bmi                 : num [1:5888] 117.2 71.8 16.1 22.5 71.4 ...\n##  $ days_onset_hosp     : num [1:5888] 2 1 2 2 1 1 2 1 1 2 ..."},{"path":"writing-functions-1.html","id":"elaborar-de-forma-iterativa-gráficos-para-diferentes-niveles-de-una-variable","chapter":"1 Escribir funciones","heading":"Elaborar de forma iterativa gráficos para diferentes niveles de una variable","text":"Produciremos aquí un gráfico circular para ver la distribución del resultado de los pacientes en China durante el brote de H7N9 para cada provincia. En lugar de repetir el código para cada una de ellas, nos limitaremos aplicar una función que crearemos.","code":"\n#precisar opciones para el uso de highchart\noptions(highcharter.theme =   highcharter::hc_theme_smpl(tooltip = list(valueDecimals = 2)))\n\n\n#Cree una función llamada \"chart_outcome_province\" que tome como argumento el conjunto de datos y el nombre de la provincia para la cual plotear la distribución del resultado.\n\nchart_outcome_province <- function(data_used, prov){\n  \n  tab_prov <- data_used %>% \n    filter(province == prov,\n           !is.na(outcome))%>% \n    group_by(outcome) %>% \n    count() %>%\n    adorn_totals(where = \"row\") %>% \n    adorn_percentages(denominator = \"col\", )%>%\n    mutate(\n        perc_outcome= round(n*100,2))\n  \n  \n  tab_prov %>%\n    filter(outcome != \"Total\") %>% \n  highcharter::hchart(\n    \"pie\", hcaes(x = outcome, y = perc_outcome),\n    name = paste0(\"Distibution of the outcome in:\", prov)\n    )\n  \n}\n\nchart_outcome_province(flu_china, \"Shanghai\")\nchart_outcome_province(flu_china,\"Zhejiang\")\nchart_outcome_province(flu_china,\"Jiangsu\")"},{"path":"writing-functions-1.html","id":"producir-iterativamente-tablas-para-diferentes-niveles-de-una-variable","chapter":"1 Escribir funciones","heading":"Producir iterativamente tablas para diferentes niveles de una variable","text":"Aquí crearemos tres indicadores para resumirlos en una tabla y nos gustaría elaborar esta tabla para cada una de las provincias. Nuestros indicadores son el retraso entre el inicio y la hospitalización, el porcentaje de recuperación y la edad media de los casos.Indicateurs pour la province de: ShanghaiIndicateursEstimationMean delay onset-hosp4.0Percentage recovery46.7Median age cases67.0Indicateurs pour la province de: JiangsuIndicateursEstimationMean delay onset-hosp6.0Percentage recovery71.4Median age cases55.0","code":"\nindic_1 <- flu_china %>% \n  group_by(province) %>% \n  mutate(\n    date_hosp= strptime(date_of_hospitalisation, format = \"%m/%d/%Y\"),\n    date_ons= strptime(date_of_onset, format = \"%m/%d/%Y\"), \n    delay_onset_hosp= as.numeric(date_hosp - date_ons)/86400,\n    mean_delay_onset_hosp = round(mean(delay_onset_hosp, na.rm=TRUE ), 0)) %>%\n  select(province, mean_delay_onset_hosp)  %>% \n  distinct()\n     \n\nindic_2 <-  flu_china %>% \n            filter(!is.na(outcome)) %>% \n            group_by(province, outcome) %>% \n            count() %>%\n            pivot_wider(names_from = outcome, values_from = n) %>% \n    adorn_totals(where = \"col\") %>% \n    mutate(\n        perc_recovery= round((Recover/Total)*100,2))%>% \n  select(province, perc_recovery)\n    \n    \n    \nindic_3 <-  flu_china %>% \n            group_by(province) %>% \n            mutate(\n                    median_age_cases = median(as.numeric(age), na.rm = TRUE)\n            ) %>% \n  select(province, median_age_cases)  %>% \n  distinct()## Warning in median(as.numeric(age), na.rm = TRUE): NAs introduced by coercion\n#unir los indicadores de los tres conjuntos de datos\n\ntable_indic_all <- indic_1 %>% \n  dplyr::left_join(indic_2, by = \"province\") %>% \n        left_join(indic_3, by = \"province\")\n\n\n#imprimir los indicadores en una flextable\n\n\nprint_indic_prov <-  function(table_used, prov){\n  \n  #first transform a bit the dataframe for printing ease\n  indic_prov <- table_used %>%\n    filter(province==prov) %>%\n    pivot_longer(names_to = \"Indicateurs\", cols = 2:4) %>% \n   mutate( indic_label = factor(Indicateurs,\n   levels= c(\"mean_delay_onset_hosp\",\"perc_recovery\",\"median_age_cases\"),\n   labels=c(\"Mean delay onset-hosp\",\"Percentage of recovery\", \"Median age of the cases\"))\n   ) %>% \n    ungroup(province) %>% \n    select(indic_label, value)\n  \n\n    tab_print <- flextable(indic_prov)  %>%\n    theme_vanilla() %>% \n    flextable::fontsize(part = \"body\", size = 10) \n    \n    \n     tab_print <- tab_print %>% \n                  autofit()   %>%\n                  set_header_labels( \n                indic_label= \"Indicateurs\", value= \"Estimation\") %>%\n    flextable::bg( bg = \"darkblue\", part = \"header\") %>%\n    flextable::bold(part = \"header\") %>%\n    flextable::color(color = \"white\", part = \"header\") %>% \n    add_header_lines(values = paste0(\"Indicateurs pour la province de: \", prov)) %>% \nbold(part = \"header\")\n \n tab_print <- set_formatter_type(tab_print,\n   fmt_double = \"%.2f\",\n   na_str = \"-\")\n\ntab_print \n    \n}\n\n\n\n\nprint_indic_prov(table_indic_all, \"Shanghai\")\nprint_indic_prov(table_indic_all, \"Jiangsu\")"},{"path":"writing-functions-1.html","id":"tips-and-best-practices-for-well-functioning-functions","chapter":"1 Escribir funciones","heading":"1.8 Consejos y buens prácticas para el buen funcionamiento de las funciones","text":"La programación funcional está pensada para aliviar el código y facilitar su lectura. Podría producir lo contrario. Los siguientes consejos le ayudarán tener un código limpio y fácil de leer.","code":""},{"path":"writing-functions-1.html","id":"nombres-y-sintaxis","chapter":"1 Escribir funciones","heading":"Nombres y sintaxis","text":"Evitar el uso de caracteres que podrían haber sido fácilmente tomados por otras funciones ya existentes en su entornoEvitar el uso de caracteres que podrían haber sido fácilmente tomados por otras funciones ya existentes en su entornoSe recomienda que el nombre de la función sea corto y sencillo de entender para otro lectorSe recomienda que el nombre de la función sea corto y sencillo de entender para otro lectorEs preferible utilizar verbos como nombre de la función y sustantivos para los nombres de los argumentos.Es preferible utilizar verbos como nombre de la función y sustantivos para los nombres de los argumentos.","code":""},{"path":"writing-functions-1.html","id":"nombres-de-columnas-y-evaluación-ordenada","chapter":"1 Escribir funciones","heading":"Nombres de columnas y evaluación ordenada","text":"Si quiere saber cómo referenciar nombres de columnas que se proporcionan su código como argumentos, lea esta guía de programación de tidyverse. Entre los temas tratados están la evaluación ordenada y el uso del abrazo con {{ }} “llaves dobles”Por ejemplo, aquí hay un esqueleto rápido de código de plantilla del tutorial de la página mencionada anteriormente:","code":"\nvar_summary <- function(data, var) {\n  data %>%\n    summarise(n = n(), min = min({{ var }}), max = max({{ var }}))\n}\nmtcars %>% \n  group_by(cyl) %>% \n  var_summary(mpg)"},{"path":"writing-functions-1.html","id":"pruebas-y-tratamiento-de-errores","chapter":"1 Escribir funciones","heading":"Pruebas y tratamiento de errores","text":"Cuanto más complicada sea la tarea de una función, mayor será la posibilidad de errores. Por lo tanto, veces es necesario añadir alguna verificación dentro de la función para ayudar entender rápidamente de dónde proviene el error y encontrar una manera de solucionarlo.Puede ser más que recomendable introducir una comprobación sobre la ausencia de un argumento utilizando missing(argumento). Esta simple comprobación puede devolver el valor “TRUE” o “FALSE”.Utiliza stop() para errores más detectables.Como vemos cuando ejecutamos la mayoría de las funciones incorporadas, hay mensajes y advertencias que pueden aparecer en ciertas condiciones. Podemos integrarlos en nuestras funciones escritas utilizando las funciones message() y warning().Como vemos cuando ejecutamos la mayoría de las funciones incorporadas, hay mensajes y advertencias que pueden aparecer en ciertas condiciones. Podemos integrarlos en nuestras funciones escritas utilizando las funciones message() y warning().También podemos manejar los errores usando safely() que toma una función como argumento y la ejecuta de forma segura. De hecho, la función se ejecutará sin detenerse si encuentra un error. safely() devuelve como salida una lista con dos objetos que son los resultados y el error que se ha “saltado”.También podemos manejar los errores usando safely() que toma una función como argumento y la ejecuta de forma segura. De hecho, la función se ejecutará sin detenerse si encuentra un error. safely() devuelve como salida una lista con dos objetos que son los resultados y el error que se ha “saltado”.Podemos verificarlo ejecutando primero la mean() como función, y luego ejecutarla con safely().Como se ha dicho anteriormente, comentar bien nuestros códigos ya es una buena forma de tener documentación en nuestro trabajo.","code":"\ncontain_covid19_missing <- function(barrier_gest, wear_mask, get_vaccine){\n  \n  if (missing(barrier_gest)) (print(\"please provide arg1\"))\n  if (missing(wear_mask)) print(\"please provide arg2\")\n  if (missing(get_vaccine)) print(\"please provide arg3\")\n\n\n  if (!barrier_gest == \"yes\" | wear_mask ==\"yes\" | get_vaccine == \"yes\" ) \n       \n       return (\"you can do better\")\n  \n  else(\"please make sure all are yes, this pandemic has to end!\")\n}\n\n\ncontain_covid19_missing(get_vaccine = \"yes\")## [1] \"please provide arg1\"\n## [1] \"please provide arg2\"## Error in contain_covid19_missing(get_vaccine = \"yes\"): argument \"barrier_gest\" is missing, with no default\ncontain_covid19_stop <- function(barrier_gest, wear_mask, get_vaccine){\n  \n  if(!is.character(barrier_gest)) (stop(\"arg1 should be a character, please enter the value with `yes`, `no` or `sometimes\"))\n  \n  if (barrier_gest == \"yes\" & wear_mask ==\"yes\" & get_vaccine == \"yes\" ) \n       \n       return (\"success\")\n  \n  else(\"please make sure all are yes, this pandemic has to end!\")\n}\n\n\ncontain_covid19_stop(barrier_gest=1, wear_mask=\"yes\", get_vaccine = \"no\")## Error in contain_covid19_stop(barrier_gest = 1, wear_mask = \"yes\", get_vaccine = \"no\"): arg1 should be a character, please enter the value with `yes`, `no` or `sometimes\nmap(linelist, mean)## $case_id\n## [1] NA\n## \n## $generation\n## [1] 16.56165\n## \n## $date_infection\n## [1] NA\n## \n## $date_onset\n## [1] NA\n## \n## $date_hospitalisation\n## [1] \"2014-11-03\"\n## \n## $date_outcome\n## [1] NA\n## \n## $outcome\n## [1] NA\n## \n## $gender\n## [1] NA\n## \n## $age\n## [1] NA\n## \n## $age_unit\n## [1] NA\n## \n## $age_years\n## [1] NA\n## \n## $age_cat\n## [1] NA\n## \n## $age_cat5\n## [1] NA\n## \n## $hospital\n## [1] NA\n## \n## $lon\n## [1] -13.23381\n## \n## $lat\n## [1] 8.469638\n## \n## $infector\n## [1] NA\n## \n## $source\n## [1] NA\n## \n## $wt_kg\n## [1] 52.64487\n## \n## $ht_cm\n## [1] 124.9633\n## \n## $ct_blood\n## [1] 21.20686\n## \n## $fever\n## [1] NA\n## \n## $chills\n## [1] NA\n## \n## $cough\n## [1] NA\n## \n## $aches\n## [1] NA\n## \n## $vomit\n## [1] NA\n## \n## $temp\n## [1] NA\n## \n## $time_admission\n## [1] NA\n## \n## $bmi\n## [1] 46.89023\n## \n## $days_onset_hosp\n## [1] NA\nsafe_mean <- safely(mean)\nlinelist %>% \n  map(safe_mean)## $case_id\n## $case_id$result\n## [1] NA\n## \n## $case_id$error\n## NULL\n## \n## \n## $generation\n## $generation$result\n## [1] 16.56165\n## \n## $generation$error\n## NULL\n## \n## \n## $date_infection\n## $date_infection$result\n## [1] NA\n## \n## $date_infection$error\n## NULL\n## \n## \n## $date_onset\n## $date_onset$result\n## [1] NA\n## \n## $date_onset$error\n## NULL\n## \n## \n## $date_hospitalisation\n## $date_hospitalisation$result\n## [1] \"2014-11-03\"\n## \n## $date_hospitalisation$error\n## NULL\n## \n## \n## $date_outcome\n## $date_outcome$result\n## [1] NA\n## \n## $date_outcome$error\n## NULL\n## \n## \n## $outcome\n## $outcome$result\n## [1] NA\n## \n## $outcome$error\n## NULL\n## \n## \n## $gender\n## $gender$result\n## [1] NA\n## \n## $gender$error\n## NULL\n## \n## \n## $age\n## $age$result\n## [1] NA\n## \n## $age$error\n## NULL\n## \n## \n## $age_unit\n## $age_unit$result\n## [1] NA\n## \n## $age_unit$error\n## NULL\n## \n## \n## $age_years\n## $age_years$result\n## [1] NA\n## \n## $age_years$error\n## NULL\n## \n## \n## $age_cat\n## $age_cat$result\n## [1] NA\n## \n## $age_cat$error\n## NULL\n## \n## \n## $age_cat5\n## $age_cat5$result\n## [1] NA\n## \n## $age_cat5$error\n## NULL\n## \n## \n## $hospital\n## $hospital$result\n## [1] NA\n## \n## $hospital$error\n## NULL\n## \n## \n## $lon\n## $lon$result\n## [1] -13.23381\n## \n## $lon$error\n## NULL\n## \n## \n## $lat\n## $lat$result\n## [1] 8.469638\n## \n## $lat$error\n## NULL\n## \n## \n## $infector\n## $infector$result\n## [1] NA\n## \n## $infector$error\n## NULL\n## \n## \n## $source\n## $source$result\n## [1] NA\n## \n## $source$error\n## NULL\n## \n## \n## $wt_kg\n## $wt_kg$result\n## [1] 52.64487\n## \n## $wt_kg$error\n## NULL\n## \n## \n## $ht_cm\n## $ht_cm$result\n## [1] 124.9633\n## \n## $ht_cm$error\n## NULL\n## \n## \n## $ct_blood\n## $ct_blood$result\n## [1] 21.20686\n## \n## $ct_blood$error\n## NULL\n## \n## \n## $fever\n## $fever$result\n## [1] NA\n## \n## $fever$error\n## NULL\n## \n## \n## $chills\n## $chills$result\n## [1] NA\n## \n## $chills$error\n## NULL\n## \n## \n## $cough\n## $cough$result\n## [1] NA\n## \n## $cough$error\n## NULL\n## \n## \n## $aches\n## $aches$result\n## [1] NA\n## \n## $aches$error\n## NULL\n## \n## \n## $vomit\n## $vomit$result\n## [1] NA\n## \n## $vomit$error\n## NULL\n## \n## \n## $temp\n## $temp$result\n## [1] NA\n## \n## $temp$error\n## NULL\n## \n## \n## $time_admission\n## $time_admission$result\n## [1] NA\n## \n## $time_admission$error\n## NULL\n## \n## \n## $bmi\n## $bmi$result\n## [1] 46.89023\n## \n## $bmi$error\n## NULL\n## \n## \n## $days_onset_hosp\n## $days_onset_hosp$result\n## [1] NA\n## \n## $days_onset_hosp$error\n## NULL"},{"path":"writing-functions-1.html","id":"resources-36","chapter":"1 Escribir funciones","heading":"1.9 Recursos","text":"Funciones en R Data Science en españolCheatsheet advanzado de programación de RCheatsheet del paquete purrVídeo-ACM charla de Hadley Wickham: La alegría de la programación funcional (cómo funciona map_dbl)","code":""},{"path":"directory-interactions.html","id":"directory-interactions","chapter":"2 Interacciones con directorios","heading":"2 Interacciones con directorios","text":"En esta página cubrimos los escenarios comunes en los que se crea, se interactúa, se guarda y se importa con directorios (carpetas).","code":""},{"path":"directory-interactions.html","id":"preparation-38","chapter":"2 Interacciones con directorios","heading":"2.1 Preparación","text":"","code":""},{"path":"directory-interactions.html","id":"paquete-fs","chapter":"2 Interacciones con directorios","heading":"Paquete fs","text":"El paquete fs es un paquete tidyverse que facilita las interacciones con los directorios, mejorando algunas de las funciones de R base. En las secciones siguientes utilizaremos menudo funciones de fs.","code":"\npacman::p_load(\n  fs,             # file/directory interactions\n  rio,            # import/export\n  here,           # relative file pathways\n  tidyverse)      # data management and visualization"},{"path":"directory-interactions.html","id":"imprimir-el-directorio-como-un-árbol-de-dendrogramas","chapter":"2 Interacciones con directorios","heading":"Imprimir el directorio como un árbol de dendrogramas","text":"Utiliza la función dir_tree() de fs.Proporciona la ruta de la carpeta path = y decide si quieres mostrar sólo un nivel (recurse = FALSE) o todos los archivos en todos los subniveles (recurse = TRUE). continuación utilizamos () como abreviatura del proyecto R y especificamos su subcarpeta “data”, que contiene todos los datos utilizados para este manual de R. Lo configuramos para que muestre todos los archivos dentro de “data” y sus subcarpetas (por ejemplo, “cache”, “epidemic models”, “population”, “shp” y “weather”).","code":"\nfs::dir_tree(path = here(\"data\"), recurse = TRUE)## C:/Users/neale/Documents/Applied Epi/repos/epiRhandbook_es/data\n## ├── cache\n## │   └── epidemic_models\n## │       ├── 2015-04-30\n## │       │   ├── estimated_reported_cases_samples.rds\n## │       │   ├── estimate_samples.rds\n## │       │   ├── latest_date.rds\n## │       │   ├── reported_cases.rds\n## │       │   ├── summarised_estimated_reported_cases.rds\n## │       │   ├── summarised_estimates.rds\n## │       │   └── summary.rds\n## │       ├── epinow_res.rds\n## │       ├── epinow_res_small.rds\n## │       ├── generation_time.rds\n## │       └── incubation_period.rds\n## ├── case_linelists\n## │   ├── cleaning_dict.csv\n## │   ├── fluH7N9_China_2013.csv\n## │   ├── linelist_cleaned.rds\n## │   └── linelist_raw.xlsx\n## ├── example\n## │   ├── Central Hospital.csv\n## │   ├── district_weekly_count_data.xlsx\n## │   ├── fluH7N9_China_2013.csv\n## │   ├── hospital_linelists.xlsx\n## │   ├── linelists\n## │   │   ├── 20201007linelist.csv\n## │   │   ├── case_linelist20201006.csv\n## │   │   ├── case_linelist_2020-10-02.csv\n## │   │   ├── case_linelist_2020-10-03.csv\n## │   │   ├── case_linelist_2020-10-04.csv\n## │   │   ├── case_linelist_2020-10-05.csv\n## │   │   └── case_linelist_2020-10-08.xlsx\n## │   ├── Military Hospital.csv\n## │   ├── Missing.csv\n## │   ├── Other.csv\n## │   ├── Port Hospital.csv\n## │   └── St. Mark's Maternity Hospital (SMMH).csv\n## ├── flexdashboard\n## │   ├── outbreak_dashboard.html\n## │   ├── outbreak_dashboard.Rmd\n## │   ├── outbreak_dashboard_shiny.Rmd\n## │   ├── outbreak_dashboard_test.html\n## │   └── outbreak_dashboard_test.Rmd\n## ├── gis\n## │   ├── africa_countries.geo.json\n## │   ├── covid_incidence.csv\n## │   ├── covid_incidence_map.R\n## │   ├── linelist_cleaned_with_adm3.rds\n## │   ├── population\n## │   │   ├── sle_admpop_adm3_2020.csv\n## │   │   └── sle_population_statistics_sierraleone_2020.xlsx\n## │   └── shp\n## │       ├── README.txt\n## │       ├── sle_adm3.CPG\n## │       ├── sle_adm3.dbf\n## │       ├── sle_adm3.prj\n## │       ├── sle_adm3.sbn\n## │       ├── sle_adm3.sbx\n## │       ├── sle_adm3.shp\n## │       ├── sle_adm3.shp.xml\n## │       ├── sle_adm3.shx\n## │       ├── sle_hf.CPG\n## │       ├── sle_hf.dbf\n## │       ├── sle_hf.prj\n## │       ├── sle_hf.sbn\n## │       ├── sle_hf.sbx\n## │       ├── sle_hf.shp\n## │       └── sle_hf.shx\n## ├── godata\n## │   ├── cases_clean.rds\n## │   ├── contacts_clean.rds\n## │   ├── followups_clean.rds\n## │   └── relationships_clean.rds\n## ├── likert_data.csv\n## ├── linelist_cleaned.xlsx\n## ├── make_evd_dataset.R\n## ├── malaria_app\n## │   ├── app.R\n## │   ├── data\n## │   │   └── facility_count_data.rds\n## │   ├── funcs\n## │   │   └── plot_epicurve.R\n## │   ├── global.R\n## │   ├── malaria_app.Rproj\n## │   ├── server.R\n## │   └── ui.R\n## ├── malaria_facility_count_data.rds\n## ├── phylo\n## │   ├── sample_data_Shigella_tree.csv\n## │   ├── Shigella_subtree_2.nwk\n## │   ├── Shigella_subtree_2.txt\n## │   └── Shigella_tree.txt\n## ├── rmarkdown\n## │   ├── outbreak_report.docx\n## │   ├── outbreak_report.html\n## │   ├── outbreak_report.pdf\n## │   ├── outbreak_report.pptx\n## │   ├── outbreak_report.Rmd\n## │   ├── report_tabbed_example.html\n## │   └── report_tabbed_example.Rmd\n## ├── standardization\n## │   ├── country_demographics.csv\n## │   ├── country_demographics_2.csv\n## │   ├── deaths_countryA.csv\n## │   ├── deaths_countryB.csv\n## │   └── world_standard_population_by_sex.csv\n## ├── surveys\n## │   ├── population.xlsx\n## │   ├── survey_data.xlsx\n## │   └── survey_dict.xlsx\n## └── time_series\n##     ├── campylobacter_germany.xlsx\n##     └── weather\n##         ├── germany_weather2002.nc\n##         ├── germany_weather2003.nc\n##         ├── germany_weather2004.nc\n##         ├── germany_weather2005.nc\n##         ├── germany_weather2006.nc\n##         ├── germany_weather2007.nc\n##         ├── germany_weather2008.nc\n##         ├── germany_weather2009.nc\n##         ├── germany_weather2010.nc\n##         └── germany_weather2011.nc"},{"path":"directory-interactions.html","id":"list-files-in-a-directory","chapter":"2 Interacciones con directorios","heading":"2.2 Listar los archivos de un directorio","text":"Para listar sólo los nombres de los archivos de un directorio puedes utilizar dir() de R base. Por ejemplo, este comando lista los nombres de los archivos de la subcarpeta “population” de la carpeta “data” en un proyecto R. La ruta relativa de los archivos se proporciona utilizando () (sobre la que puede leer más en la página de importación y exportación).Para listar las rutas completas de los archivos del directorio, puedes utilizar dir_ls() de fs. Una alternativa de R base es list.files().Para obtener toda la información de los metadatos de cada archivo en un directorio, (por ejemplo, la ruta, la fecha de modificación, etc.) puedes utilizar dir_info() de fs.Esto puede ser especialmente útil si quieres extraer la última hora de modificación del archivo, por ejemplo si quieres importar la versión más reciente de un archivo. Para ver un ejemplo de esto, consulta la página de importación y exportación.Aquí está el dataframe devuelto. Desplázate la derecha para ver todas las columnas.","code":"\n# file names\ndir(here(\"data\", \"gis\", \"population\"))## [1] \"sle_admpop_adm3_2020.csv\"                        \"sle_population_statistics_sierraleone_2020.xlsx\"\n# file paths\ndir_ls(here(\"data\", \"gis\", \"population\"))## C:/Users/neale/Documents/Applied Epi/repos/epiRhandbook_es/data/gis/population/sle_admpop_adm3_2020.csv\n## C:/Users/neale/Documents/Applied Epi/repos/epiRhandbook_es/data/gis/population/sle_population_statistics_sierraleone_2020.xlsx\n# file info\ndir_info(here(\"data\", \"gis\", \"population\"))"},{"path":"directory-interactions.html","id":"file-information","chapter":"2 Interacciones con directorios","heading":"2.3 Información sobre el archivo","text":"Para extraer información de metadatos sobre un archivo específico, puedes utilizar file_info() de fs (o file.info() de R base).Aquí usamos $ para indexar el resultado y devolver sólo el valor de modification_time.","code":"\nfile_info(here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))\nfile_info(here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))$modification_time## [1] \"2022-11-22 10:34:23 CET\""},{"path":"directory-interactions.html","id":"check-if-exists","chapter":"2 Interacciones con directorios","heading":"2.4 Comprobar si existe","text":"","code":""},{"path":"directory-interactions.html","id":"objetos-r","chapter":"2 Interacciones con directorios","heading":"Objetos R","text":"Puedes utilizar exists() de R base para comprobar si un objeto R existe dentro de R (escribe el nombre del objeto entre comillas).Ten en cuenta que algunos paquetes de R base utilizan nombres de objetos genéricos como “data” entre bastidores, que aparecerán como TRUE menos que se especifique inherit = FALSE. Esta es una razón para nombrar tu conjunto de datos como “data”.Si estás escribiendo una función, deberías utilizar missing() de R base para comprobar si un argumento está presente o , en lugar de exists().","code":"\nexists(\"linelist\")## [1] TRUE\nexists(\"data\")## [1] TRUE\nexists(\"data\", inherit = FALSE)## [1] FALSE"},{"path":"directory-interactions.html","id":"directorios","chapter":"2 Interacciones con directorios","heading":"Directorios","text":"Para comprobar si un directorio existe, escribe la ruta del archivo (y el nombre del archivo) is_dir() de fs. Desplázate la derecha para ver que se imprime TRUE.Una alternativa de R base es file.exists().","code":"\nis_dir(here(\"data\"))## C:/Users/neale/Documents/Applied Epi/repos/epiRhandbook_es/data \n##                                                            TRUE"},{"path":"directory-interactions.html","id":"files","chapter":"2 Interacciones con directorios","heading":"Files","text":"Para comprobar si un archivo específico existe, utiliza is_file() de fs. Desplázate la derecha para ver que se imprime TRUE.Una alternativa de R base es file.exists().","code":"\nis_file(here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))## C:/Users/neale/Documents/Applied Epi/repos/epiRhandbook_es/data/case_linelists/linelist_cleaned.rds \n##                                                                                                TRUE"},{"path":"directory-interactions.html","id":"create","chapter":"2 Interacciones con directorios","heading":"2.5 Crear","text":"","code":""},{"path":"directory-interactions.html","id":"directorios-1","chapter":"2 Interacciones con directorios","heading":"Directorios","text":"Para crear un nuevo directorio (carpeta) puede utilizar dir_create() de fs. Si el directorio ya existe, se sobrescribirá y se devolverá ningún error.Una alternativa es dir.create() de R base, que mostrará un error si el directorio ya existe. En cambio, dir_create() en este escenario será silencioso.","code":"\ndir_create(here(\"data\", \"test\"))"},{"path":"directory-interactions.html","id":"archivos","chapter":"2 Interacciones con directorios","heading":"Archivos","text":"Puedes crear un archivo (vacío) con file_create() de fs. Si el archivo ya existe, se sobreescribirá ni se modificará.Una alternativa de R base es file.create(). Pero si el archivo ya existe, esta opción lo truncará. Si se utiliza file_create() el archivo se dejará sin cambios","code":"\nfile_create(here(\"data\", \"test.rds\"))"},{"path":"directory-interactions.html","id":"crear-si-no-existe","chapter":"2 Interacciones con directorios","heading":"Crear si no existe","text":"EN CONSTRUCCIÓN","code":""},{"path":"directory-interactions.html","id":"delete","chapter":"2 Interacciones con directorios","heading":"2.6 Borrar","text":"","code":""},{"path":"directory-interactions.html","id":"objetos-r-1","chapter":"2 Interacciones con directorios","heading":"Objetos R","text":"Utiliza rm() de R base para eliminar un objeto R.","code":""},{"path":"directory-interactions.html","id":"directorios-2","chapter":"2 Interacciones con directorios","heading":"Directorios","text":"Utiliza dir_delete() de fs.","code":""},{"path":"directory-interactions.html","id":"archivos-1","chapter":"2 Interacciones con directorios","heading":"Archivos","text":"Puedes eliminar archivos con file_delete() de fs.","code":""},{"path":"directory-interactions.html","id":"running-other-files","chapter":"2 Interacciones con directorios","heading":"2.7 Ejecución de otros archivos","text":"","code":""},{"path":"directory-interactions.html","id":"source","chapter":"2 Interacciones con directorios","heading":"source()","text":"Para ejecutar un script de R desde otro script de R, puedes utilizar el comando source() (de R base).Esto equivale ver el script de R anterior y clicar en el botón “Source” en la parte superior derecha del script. Esto ejecutará el script pero lo hará de forma silenciosa (sin salida la consola de R) menos que se pretenda específicamente. Consulta la página sobre [Consola interactiva] para ver ejemplos de uso de source() para interactuar con un usuario través de la consola de R en modo de pregunta y respuesta.","code":"\nsource(here(\"scripts\", \"cleaning_scripts\", \"clean_testing_data.R\"))"},{"path":"directory-interactions.html","id":"render","chapter":"2 Interacciones con directorios","heading":"render()","text":"render() es una variación de source() que se utiliza más menudo para los scripts de R markdown. Tu pescribes input = que es el archivo R markdown, y también output_format = (“html_document”, “pdf_document”, “word_document”, ““)Mira la página sobre Informes con R Markdown para más detalles. También consulta la documentación de render() aquí o escribiendo ?render.","code":""},{"path":"directory-interactions.html","id":"ejecutar-archivos-en-un-directorio","chapter":"2 Interacciones con directorios","heading":"Ejecutar archivos en un directorio","text":"Puedes crear un bucle y utilizarlo para source() cada archivo en un directorio, identificado con dir().Si sólo quieres ejecutar determinados scripts, puedes identificarlos por su nombre de la siguiente manera:Aquí puedes ver una comparación de las funciones fs y R base.","code":"\nfor(script in dir(here(\"scripts\"), pattern = \".R$\")) {   # for each script name in the R Project's \"scripts\" folder (with .R extension)\n  source(here(\"scripts\", script))                        # source the file with the matching name that exists in the scripts folder\n}\nscripts_to_run <- c(\n     \"epicurves.R\",\n     \"demographic_tables.R\",\n     \"survival_curves.R\"\n)\n\nfor(script in scripts_to_run) {\n  source(here(\"scripts\", script))\n}"},{"path":"directory-interactions.html","id":"importar-archivos-en-un-directorio","chapter":"2 Interacciones con directorios","heading":"Importar archivos en un directorio","text":"Consulta la página sobre importación y exportación para importar y exportar archivos individuales.Consulta también la página de importación y exportación para conocer los métodos para importar automáticamente el archivo más reciente, basándose en una fecha del nombre del archivo o mirando los metadatos del mismo.Consulta la página sobre Iteración, bucles y listas para ver un ejemplo con el paquete purrr demostrando:Dividir un dataframe y guardarlo como múltiples archivos CSVDividir un dataframe y guardar cada parte como una hoja separada dentro de un libro de ExcelImportar varios archivos CSV y combinarlos en un dataframeImportar un libro de Excel con varias hojas y combinarlas en un dataframe","code":""},{"path":"directory-interactions.html","id":"base-r-4","chapter":"2 Interacciones con directorios","heading":"2.8 R base","text":"Mira continuación las funciones list.files() y dir(), que realizan la misma operación de listar archivos dentro de un directorio especificado. Puedes especificar ignore.case = o un patrón específico para buscar.Si un archivo está actualmente “abierto”, se mostrará en su carpeta con una tilde delante, como “~$hospital_linelists.xlsx”.","code":"\nlist.files(path = here(\"data\"))\n\nlist.files(path = here(\"data\"), pattern = \".csv\")\n# dir(path = here(\"data\"), pattern = \".csv\")\n\nlist.files(path = here(\"data\"), pattern = \"evd\", ignore.case = TRUE)"},{"path":"directory-interactions.html","id":"resources-37","chapter":"2 Interacciones con directorios","heading":"2.9 Recursos","text":"https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"version-control-and-collaboration-with-git-and-github","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3 Control de versiones y colaboración con Git y Github","text":"Este capítulo presenta una visión general del uso de Git para colaborar con otros. Puedes encontrar tutoriales más extensos al final, en la sección de Recursos.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"what-is-git","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.1 ¿Qué es Git?","text":"Git es un software de control de versiones que permite seguir los cambios realizados en una carpeta. Se puede utilizar como la opción “control de cambios” de Word, LibreOffice o Google docs, pero para todo tipo de archivos. Es una de las opciones más potentes y más utilizadas para el control de versiones.¿Por qué nunca oído hablar de Git? - Mientras que las personas con formación como desarrollador aprenden habitualmente utilizar un software de control de versiones (Git, Mercurial, Subversion u otros), pocas personas de las disciplinas cuantitativas se nos enseñan estas habilidades. En consecuencia, la mayoría de profesionales de la epidemiología nunca hemos oído hablar sobre esto en sus estudios, y tenemos que aprenderlo sobre la marcha.Espera, oído hablar de Github, ¿es lo mismo? - exactamente, pero menudo se utilizan juntos, y veremos aquí cómo hacerlo. En resumen:Git es el sistema de control de versiones, una pieza de software. Se puede utilizar localmente en el ordenador o para sincronizar una carpeta con un sitio web anfitrión. Por defecto, se utiliza una ventana de terminal para escribir las instrucciones de Git en la línea de comandos.Git es el sistema de control de versiones, una pieza de software. Se puede utilizar localmente en el ordenador o para sincronizar una carpeta con un sitio web anfitrión. Por defecto, se utiliza una ventana de terminal para escribir las instrucciones de Git en la línea de comandos.Se puede utilizar un cliente/interfaz Git para evitar la línea de comandos y realizar las mismas acciones (al menos para las más sencillas y supercomunes).Se puede utilizar un cliente/interfaz Git para evitar la línea de comandos y realizar las mismas acciones (al menos para las más sencillas y supercomunes).Si se quiere almacenar una carpeta en un sitio web para colaborar con otros, se puede utilizar una cuenta en Github, Gitlab, Bitbucket u otros.Si se quiere almacenar una carpeta en un sitio web para colaborar con otros, se puede utilizar una cuenta en Github, Gitlab, Bitbucket u otros.Se puede utilizar el cliente/interfaz Github Desktop, que utiliza Git en segundo plano para gestionar los archivos, tanto localmente en el ordenador, como remotamente en un servidor de Github.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"why-use-the-combo-git-and-github","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.2 ¿Por qué utilizar la combinación de Git y Github?","text":"El uso de Git facilita:Almacenar versiones de archivos con cambios incrementales de forma que permite volver fácilmente cualquier estado anteriorMantener ramas paralelas, es decir, versiones de desarrollo/“trabajo” que más adelante pueden integrar los cambios después de su revisiónEsto también se puede hacer localmente en tu ordenador, incluso si colaboras con otras personas. Alguna vez ….:¿te arrepentido de haber eliminado una sección de código, para darte cuenta dos meses después de que realmente la necesitabas?¿te arrepentido de haber eliminado una sección de código, para darte cuenta dos meses después de que realmente la necesitabas?¿vuelto un proyecto que había estado en pausa e intentado recordar si habías hecho esa complicada modificación en uno de los modelos?¿vuelto un proyecto que había estado en pausa e intentado recordar si habías hecho esa complicada modificación en uno de los modelos?¿tenías un archivo modelo_1.R y otro archivo modelo_1_prueba.R y un archivo modelo_1_no_funciona.R para probar las cosas?¿tenías un archivo modelo_1.R y otro archivo modelo_1_prueba.R y un archivo modelo_1_no_funciona.R para probar las cosas?¿tenías un archivo report.Rmd, un archivo report_full.Rmd, un archivo report_true_final.Rmd, un archivo report_final_20210304.Rmd, un archivo report_final_20210402.Rmd y maldecías tus habilidades de almacenamiento?¿tenías un archivo report.Rmd, un archivo report_full.Rmd, un archivo report_true_final.Rmd, un archivo report_final_20210304.Rmd, un archivo report_final_20210402.Rmd y maldecías tus habilidades de almacenamiento?Git puede ayudar con todo eso, y vale la pena aprenderlo sólo por eso.Sin embargo, se vuelve aún más potente cuando se utiliza con un repositorio en línea como Github para apoyar proyectos de colaboración. Esto facilita:Colaboración: otros pueden revisar, comentar y aceptar o rechazar los cambiosColaboración: otros pueden revisar, comentar y aceptar o rechazar los cambiosCompartir el código, los datos y los resultados, e invitar hacer comentarios al público (o en privado, con tu equipo)Compartir el código, los datos y los resultados, e invitar hacer comentarios al público (o en privado, con tu equipo)y evitar:“Uy, olvidé de enviar la última versión y ahora tienes que rehacer el trabajo de dos días en este nuevo archivo”“Uy, olvidé de enviar la última versión y ahora tienes que rehacer el trabajo de dos días en este nuevo archivo”Mina, Henry y Oumar trabajaron al mismo tiempo en un script y necesitan fusionar manualmente sus cambiosMina, Henry y Oumar trabajaron al mismo tiempo en un script y necesitan fusionar manualmente sus cambiosDos personas intentan modificar el mismo archivo en Dropbox y Sharepoint y esto crea un error de sincronización.Dos personas intentan modificar el mismo archivo en Dropbox y Sharepoint y esto crea un error de sincronización.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"esto-suena-complicado-yo-no-soy-un-programador","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Esto suena complicado, yo no soy un programador","text":"Puede ser. Los ejemplos de usos avanzados pueden ser bastante aterradores. Sin embargo, al igual que ocurre con R, o incluso con Excel, es necesario convertirse en un experto para aprovechar las ventajas de la herramienta. El aprendizaje de un pequeño número de funciones y nociones te permite seguir sus cambios, sincronizar los archivos en un repositorio en línea y colaborar con los colegas en muy poco tiempo.Debido la curva de aprendizaje, el contexto de emergencia puede ser el mejor momento para aprender estas herramientas. Pero el aprendizaje puede hacerse por pasos. Una vez que adquieras un par de nociones, tu flujo de trabajo puede ser bastante eficiente y rápido. Si estás trabajando en un proyecto en el que la colaboración con personas través de Git sea una necesidad, … en realidad es un buen momento para adquirir confianza en su uso en solitario antes de sumergirte en ello en un proyecto colaborativo.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"setup","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.3 Configuración","text":"","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"instalar-git","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Instalar Git","text":"Git es el motor que está de este control de cambios la computadora; rastrea los cambios, las ramas (versiones), las fusiones y las reversiones. Primero debes instalar Git desde https://git-scm.com/downloads.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"instalar-una-interfaz-gráfica-opcional-pero-recomendable","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Instalar una interfaz gráfica (opcional pero recomendable)","text":"Git tiene su propio lenguaje de comandos, que se pueden escribir en la línea de comandos de un terminal. Sin embargo, hay muchos clientes/interfaces que proporcionan una buena visualización de las modificaciones de archivos o ramas. Esto es recomendable ya que personas que son desarrolladoras, en su uso diario, rara vez necesitarán interactuar directamente con Git.Existen muchas opciones, en todos los sistemas operativos, desde las amigables para los principiantes hasta las más complejas. Unas buenas opciones para principiantes son el panel Git de RStudio y Github Desktop, que mostraremos en este capítulo. Las opciones intermedias (más potentes, pero más complejas) incluyen Source Tree, Gitkracken, Smart Git y otras.Explicación rápida sobre los clientes Git.Nota: dado que todas las interfaces utilizan Git internamente, puedes probar varias de ellas, cambiar de una otra en un proyecto determinado, utilizar la consola puntualmente para una acción que tu interfaz soporta, o incluso realizar una serie de acciones online en Github.Como se indica más adelante, es posible que ocasionalmente tengas que escribir comandos Git en un terminal como en la pestaña “terminal” de RStudio (una pestaña adyacente la consola de R) o la aplicación de terminal Git Bash.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"cuenta-de-github","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Cuenta de Github","text":"Regístrate para obtener una cuenta gratuita en github.com.Es posible que se te ofrezca configurar la autenticación de dos pasos con una aplicación en tu teléfono. Lee más en estos documentos de ayuda de Github.Si usas Github Desktop, puedes introducir tus credenciales de Github después de la instalación siguiendo estos pasos. Si lo haces, las credenciales se te pedirán más tarde cuando intentes clonar un proyecto desde Github.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"vocabulary-concepts-and-basic-functions","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.4 Vocabulario, conceptos y funciones básicas","text":"Al igual que cuando se aprende R, hay que recordar un poco de vocabulario para entender Git. Aquí están los conceptos básicos para empezar / tutorial interactivo. En las próximas secciones, mostraremos cómo usar las interfaces, pero es bueno tener el vocabulario y los conceptos en mente, para construir tu modelo mental, ya que lo necesitarás cuando más tarde, aunque uses las interfaces de los programas.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"repositorio","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Repositorio","text":"Un repositorio Git (“repo”) es una carpeta que contiene todas las subcarpetas y archivos de tu proyecto (datos, código, imágenes, etc.) y sus historiales de revisión. Cuando empieces seguir los cambios en el repositorio con él, Git creará una carpeta oculta que contiene toda la información de seguimiento. Un repositorio típico de Git es la carpeta de tu proyecto R (ver la página del manual sobre proyectos R).Mostraremos cómo crear (inicializar) un repositorio Git desde Github, Github Desktop o Rstudio en las siguientes secciones.\nsections.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"commits-consolidaciones","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Commits (Consolidaciones)","text":"Cuando realices un cambio en el proyecto, hay que ejecutar commit para consolidar estos cambios (el delta) realizados en tus archivos. Por ejemplo, quizás hayas editado algunas líneas de código y actualizado unos datos relacionados. Una vez guardados los cambios, puedes agrupar y confirmar estos cambios en un solo “commit”.Cada consolidación (commit) tiene un ID único (un hash). Para el control de versiones, puedes revertir tu proyecto hacia atrás en base estas Consolidaciones, así que es mejor mantenerlas relativamente pequeñas y coherentes. También realizarás una breve descripción de los cambios llamada “commit message (mensaje de consolidación)”. En cierto modo, cada commit es una instantánea del proyecto en un momento dado.¿Cambios por etapas (staged)? Poner etapas en los cambios es añadirlos la zona de preparación para la siguiente consolidación. La idea es que puedas decidir con precisión qué cambios incluir en un determinado commit. Por ejemplo, si trabajas en la especificación del modelo en un script, y más tarde en una figura en otro script, tendría sentido tener dos commits diferentes (sería más fácil en caso de que quisieras revertir los cambios en la figura pero en el modelo).","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"ramas-branches","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Ramas (Branches)","text":"Una rama representa una línea independiente de cambios en su repo, una versión paralela y alternativa de los archivos del proyecto.Las ramas son útiles para probar los cambios antes de incorporarlos la rama principal (main, master), que suele ser la versión primaria/final/“viva” de tu proyecto. Cuando termines de experimentar en una rama, puedes incorporar los cambios tu rama principal, fusionándola, o eliminarla, si los cambios fueron tan exitosos.Nota: es necesario colaborar con otras personas para utilizar las ramas, ni es necesario tener un repositorio remoto en línea.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"repositorios-locales-y-remotos","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Repositorios locales y remotos","text":"el repositorio LOCAL en el ordenador físico. Aquí es donde se hacen los cambios reales los archivos/código.el repositorio LOCAL en el ordenador físico. Aquí es donde se hacen los cambios reales los archivos/código.el repositorio REMOTO, en línea: las versiones de los archivos del proyecto en el repositorio Github (o en cualquier otro alojamiento web).el repositorio REMOTO, en línea: las versiones de los archivos del proyecto en el repositorio Github (o en cualquier otro alojamiento web).Para sincronizar estos repositorios, utilizaremos más funciones. En efecto, diferencia de Sharepoint, Dropbox u otro software de sincronización, Git actualiza automáticamente el repositorio local en base lo que está en línea, o viceversa. Tú eliges cuándo y cómo sincronizarlo.FETCH: git fetch descarga los cambios realizados en el repositorio remoto pero cambia el repositorio local. Piensa en ello para una comprobación del estado del repositorio remoto.FETCH: git fetch descarga los cambios realizados en el repositorio remoto pero cambia el repositorio local. Piensa en ello para una comprobación del estado del repositorio remoto.PULL:git pull descarga archivos cambiados en los repositorios remotos y actualiza el repositorio local.PULL:git pull descarga archivos cambiados en los repositorios remotos y actualiza el repositorio local.PUSH: Actualiza el repositorio remoto. Cuando hayas hecho uno o varios commits localmente, puedes hacer git push de los commits al repositorio remoto. Esto envía tus cambios Github para actualizar el repositorio y que otras personas puedan verlos y extraerlos si lo desean.PUSH: Actualiza el repositorio remoto. Cuando hayas hecho uno o varios commits localmente, puedes hacer git push de los commits al repositorio remoto. Esto envía tus cambios Github para actualizar el repositorio y que otras personas puedan verlos y extraerlos si lo desean.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"get-started-create-a-new-repository","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.5 Empezar: crear un nuevo repositorio","text":"Hay muchas formas de crear nuevos repositorios. Puedes hacerlo desde la consola/terminal, desde Github, desde una interfaz gráfica, como Github Desktop o Rstudio->Git.Hay dos enfoques generales para la puesta en marcha:Crear un nuevo proyecto R partir de un repositorio de Github existente o nuevo (preferible para los principiantes), oCrear un repositorio Github para un proyecto R existente","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"archivos-de-inicio","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Archivos de inicio","text":"create new repository, can optionally create\nfiles, can add repository later stage.\ntypically live “root” folder repository.Un archivo README es un archivo que alguien puede leer para entender por qué existe tu proyecto y qué más deben saber para usarlo. Al principio estará vacío, pero deberías completarlo más adelante.Un archivo README es un archivo que alguien puede leer para entender por qué existe tu proyecto y qué más deben saber para usarlo. Al principio estará vacío, pero deberías completarlo más adelante.Un archivo .gitignore es un archivo de texto donde cada línea contendría carpetas o archivos que Git debería ignorar (rastrear los cambios). Lee más sobre esto y mira ejemplos aquí.Un archivo .gitignore es un archivo de texto donde cada línea contendría carpetas o archivos que Git debería ignorar (rastrear los cambios). Lee más sobre esto y mira ejemplos aquí.Puedes elegir un tipo de licencia para el trabajo, de modo que otras personas sepan en qué condiciones pueden utilizar o reproducir tu obra. Para más información, consulta las licencias Creative Commons.Puedes elegir un tipo de licencia para el trabajo, de modo que otras personas sepan en qué condiciones pueden utilizar o reproducir tu obra. Para más información, consulta las licencias Creative Commons.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"crear-un-nuevo-repositorio-en-github","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Crear un nuevo repositorio en Github","text":"Para crear un nuevo repositorio, entra en Github y busca el botón verde para crear un nuevo repositorio. Este repositorio, ahora vacío, puede ser clonado localmente en tu ordenador (ver la siguiente sección).Debes elegir si quieres que tu repositorio sea público (visible para todo el mundo en Internet) o privado (sólo visible para aquellos con permiso). Esto tiene importantes implicaciones si tus datos son sensibles. Si tu repositorio es privado te encontrarás con algunos límites en circunstancias especiales avanzadas, como por ejemplo si estás usando actions de Github para ejecutar automáticamente tu código en la nube.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"clonar-desde-un-repositorio-de-github","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Clonar desde un repositorio de Github","text":"Puedes clonar un repositorio de Github existente para crear un nuevo proyecto R local en tu ordenador.El repositorio de Github puede ser uno que ya existe y tiene contenido, o puede ser un repositorio vacío que acabas de crear. En este último caso, básicamente estás creando el repositorio de Github y el proyecto local de R al mismo tiempo (ver las instrucciones anteriores).Nota: si tienes derechos de contribución en un repositorio de Github, es posible primero bifurcar (fork) el repositorio hacia tu perfil, y luego proceder con las otras acciones. La bifurcación se explica al final de este capítulo, pero recomendamos que leas primero las otras secciones.Paso 1: Navega en Github hasta el repositorio, clica en el botón verde “Code” y copia la HTTPS clon URL (ver imagen inferior)El siguiente paso se puede realizar en cualquier interfaz. Lo ilustraremos con Rstudio y Github desktop.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-rstudio","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En Rstudio","text":"En RStudio, inicia un nuevo proyecto R clicando en File>New project > Version control > Git) (Archivo > Nuevo proyecto > Control de versiones > Git)Cuando te pida la “URL del repositorio”, pega la URL HTTPS de GithubCuando te pida la “URL del repositorio”, pega la URL HTTPS de GithubAsigna al proyecto R un nombre corto e informativoAsigna al proyecto R un nombre corto e informativoElige dónde se guardará el nuevo proyecto R localmenteElige dónde se guardará el nuevo proyecto R localmenteMarca “Abrir en una nueva sesión” y clica en “Crear proyecto”.Marca “Abrir en una nueva sesión” y clica en “Crear proyecto”.Ahora estás en un nuevo proyecto local de RStudio que es un clon del repositorio de Github. Este proyecto local y el repositorio de Github están ahora vinculados.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-github-desktop","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En Github Desktop","text":"Clica en File>Clone repository (Archivo > Clonar un repositorio)Clica en File>Clone repository (Archivo > Clonar un repositorio)Selecciona la pestaña URLSelecciona la pestaña URLPega la URL HTTPS de Github en la primera casillaPega la URL HTTPS de Github en la primera casillaSelecciona la carpeta en la que deseas tener tu repositorio localSelecciona la carpeta en la que deseas tener tu repositorio localClica en “CLONE”Clica en “CLONE”","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"nuevo-repositorio-de-github-a-partir-de-un-proyecto-r-existente","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Nuevo repositorio de Github a partir de un proyecto R existente","text":"Un escenario alternativo de configuración es que ya tengas un proyecto R con contenido, y quieras crear un repositorio Github para él.Crear un nuevo repositorio de Github vacío para el proyecto (ver instrucciones anteriores)Crear un nuevo repositorio de Github vacío para el proyecto (ver instrucciones anteriores)Clona este repositorio localmente (ver las instrucciones de HTTPS más arriba)Clona este repositorio localmente (ver las instrucciones de HTTPS más arriba)Copia todo el contenido de tu proyecto R preexistente (códigos, datos, etc.) en este nuevo repositorio local vacío (por ejemplo, utiliza copiar y pegar).Copia todo el contenido de tu proyecto R preexistente (códigos, datos, etc.) en este nuevo repositorio local vacío (por ejemplo, utiliza copiar y pegar).Abre tu nuevo proyecto en RStudio, y ve al panel Git. Los nuevos archivos deberían registrarse como cambios de archivo, ahora rastreados por Git. Por lo tanto, puedes agrupar estos cambios bajo un commit y push Github. Una vez hecho push, el repositorio en Github reflejará todos los archivos.Abre tu nuevo proyecto en RStudio, y ve al panel Git. Los nuevos archivos deberían registrarse como cambios de archivo, ahora rastreados por Git. Por lo tanto, puedes agrupar estos cambios bajo un commit y push Github. Una vez hecho push, el repositorio en Github reflejará todos los archivos.Consulta la sección de flujo de trabajo de Github para obtener más detalles sobre este proceso.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"qué-aspecto-tiene-ahora","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"¿Qué aspecto tiene ahora?","text":"","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-rstudio-1","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En RStudio","text":"Una vez que hayas clonado un repositorio de Github un nuevo proyecto R, ahora verás en RStudio una pestaña “Git”. Esta pestaña aparece en el mismo panel de RStudio que Environment:Botón commit para consolidar los cambios del archivo guardado en local (se abrirá una nueva ventana para añadir la descripción y confirmarlo)Botón commit para consolidar los cambios del archivo guardado en local (se abrirá una nueva ventana para añadir la descripción y confirmarlo)Flecha azul pull (descarga los cambios realizados en la versión remota/Github de esa rama y actualiza tu versión local de la rama)Flecha azul pull (descarga los cambios realizados en la versión remota/Github de esa rama y actualiza tu versión local de la rama)Flecha verde push (enviar cualquier commits/cambio de tu versión local de la rama y actualiza la versión remota/Github de esa rama)Flecha verde push (enviar cualquier commits/cambio de tu versión local de la rama y actualiza la versión remota/Github de esa rama)La pestaña Git en RStudioLa pestaña Git en RStudioBotón para crear una rama NUEVA dependiente de la rama que se muestra la derecha como base. Casi siempre querrá bifurcarse desde la rama principal (después de haber tirado primero para actualizar la rama principal)Botón para crear una rama NUEVA dependiente de la rama que se muestra la derecha como base. Casi siempre querrá bifurcarse desde la rama principal (después de haber tirado primero para actualizar la rama principal)La Rama en la que trabajas actualmenteLa Rama en la que trabajas actualmenteA continuación aparecerán los cambios que haya realizado en el código o en otros archivosA continuación aparecerán los cambios que haya realizado en el código o en otros archivos","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-github-desktop-1","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En Github Desktop","text":"Github Desktop es una aplicación independiente que te permite gestionar todos tus repositorios. Cuando la abres, la interfaz te permite elegir el repositorio en el que quieres trabajar, y luego realizar acciones básicas de Git desde allí.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"git-github-workflow","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.6 Flujo de trabajo Git + Github","text":"","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"resumen-del-proceso","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Resumen del proceso","text":"Una vez que hayas completado la configuración (descrita anteriormente), tendrás un repo de Github que está conectado (clonado) un proyecto local de R. La rama principal (main por defecto) es la llamada versión “viva” de todos los archivos. Cuando quieras hacer modificaciones, es una buena práctica crear una nueva rama partir de la rama principal (como “Hacer una copia”). Este es un flujo de trabajo típico en Git porque crear una rama es fácil y rápido.Un flujo de trabajo típico es el siguiente:Asegúrate de que tu repositorio local está actualizado, actualízalo si es asíAsegúrate de que tu repositorio local está actualizado, actualízalo si es asíVe la rama en la que estabas trabajando anteriormente, o crea una nueva rama para probar algunas cosasVe la rama en la que estabas trabajando anteriormente, o crea una nueva rama para probar algunas cosasTrabaja en los archivos localmente en tu ordenador, haz uno o varios commits en esta ramaTrabaja en los archivos localmente en tu ordenador, haz uno o varios commits en esta ramaActualiza la versión remota de la rama con tus cambios (push)Actualiza la versión remota de la rama con tus cambios (push)Cuando estés satisfecho con tu rama, puedes fusionar la versión en línea de la rama de trabajo con la rama “principal” en línea para transferir los cambiosCuando estés satisfecho con tu rama, puedes fusionar la versión en línea de la rama de trabajo con la rama “principal” en línea para transferir los cambiosOtros miembros del equipo pueden estar haciendo lo mismo con sus propias ramas, o quizás contribuyendo con commits en su rama de trabajo también.continuación, repasamos el proceso anterior paso paso con más detalle. Es un esquema que hemos desarrollado - está en el formato de una tabla de dos x dos, por lo que debería ayudarnos entenderlo.Aquí hay otro diagrama.Nota: hasta hace poco, se utilizaba el término rama “master” (maestra), pero ahora se denomina rama “main” (principal).Fuente de la imagen","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"create-a-new-branch","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.7 Crear una nueva rama","text":"Cuando seleccionas una rama para trabajar, Git restablece tu directorio de trabajo tal y como estaba la última vez que estuviste en esta rama.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-el-panel-git-de-rstudio","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En el panel Git de Rstudio","text":"Asegúrate que te encuentras en la rama “main” (master, principal) y, continuación, clica en el icono morado para crear una nueva rama (véase la imagen anterior).Pedirá un nombre descriptivo para esa rama, de una palabra (se pueden usar barras bajas si es necesario).Verás que localmente, sigues en el mismo proyecto R, pero ya estás trabajando en la rama “main”(principal).Una vez creada, la nueva rama también aparecerá en el sitio web de Github como una rama.Puedes visualizar las ramas en el panel Git de Rstudio tras clicar en “History”","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-github-desktop-2","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En Github Desktop","text":"El proceso es muy similar, se pide que des un nombre tu rama. Después, pedirá que “publique su rama en Github” para que la nueva rama aparezca también en el repositorio remoto.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-la-consola","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En la consola","text":"Lo que realmente ocurre entre bastidores es que creas una nueva rama con git branch, y luego vas la rama con git checkout (es decir, le dices Git que tus próximos commits se producirán allí). Desde tu repositorio git:Para más información sobre el uso de la consola, consulta la sección sobre comandos Git al final.","code":"git branch my-new-branch  # Crea la nueva rama my-new-branch\ngit checkout my-new-branch # Va a la rama\ngit checkout -b my-new-branch # Ambos a la vez (satajo)"},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"commit-changes","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.8 Consolidar los cambios (Commit)","text":"Ahora puedes editar el código, añadir nuevos archivos, actualizar conjuntos de datos, etc.Cada uno de tus cambios es rastreado, una vez que el archivo respectivo es guardado. Los archivos modificados aparecerán en la pestaña Git de RStudio, en Github Desktop, o utilizando el comando git status en el terminal (ver más abajo).Siempre que hagas cambios sustanciales (por ejemplo, añadir o actualizar una sección de código), haz una pausa y consolida esos cambios (Commit). Piensa en una Consolidación como un “lote” de cambios relacionados con un propósito común. Siempre puedes seguir revisando un archivo después de haber confirmado los cambios en él.Consejo sobre los commits: en general, es mejor hacer Consolidaciones pequeñas, que puedan revertirse fácilmente si surge un problema, y Consolidar juntas modificaciones relacionadas con un propósito común. Para lograr esto, verás que debes hacer commits menudo. Al principio, es probable que te olvides de hacer commits menudo, pero luego el hábito se impone.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-rstudio-2","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En Rstudio","text":"El ejemplo siguiente muestra que, desde la última consolidación, el script de R Markdown “collaboration.Rmd” ha cambiado, y se han añadido varias imágenes PNG.Puede que te preguntes qué representan los cuadrados amarillo, azul, verde y rojo que aparecen junto los nombres de los archivos. Aquí hay una captura de la hoja de trucos de RStudio que explica su significado. Ten en cuenta que los cambios con el amarillo “?” aún pueden ser puestos en escena, confirmados y enviados.Clica el botón “Commit” en la pestaña Git, que abrirá una nueva ventana (mostrada continuación)Clica el botón “Commit” en la pestaña Git, que abrirá una nueva ventana (mostrada continuación)Clica en un nombre de archivo en el cuadro superior izquierdoClica en un nombre de archivo en el cuadro superior izquierdoRevisa los cambios que ha realizado en ese archivo (resaltados en verde o rojo)Revisa los cambios que ha realizado en ese archivo (resaltados en verde o rojo)“Stage” (Poner en etapas) el archivo , lo que incluirá esos cambios en la consolidación. Para ello, marca la casilla situada junto al nombre del archivo. También puedes marcar varios nombres de archivo y clicar en “Stage”.“Stage” (Poner en etapas) el archivo , lo que incluirá esos cambios en la consolidación. Para ello, marca la casilla situada junto al nombre del archivo. También puedes marcar varios nombres de archivo y clicar en “Stage”.Escribe un mensaje de consolidación breve pero descriptivo (obligatorio)Escribe un mensaje de consolidación breve pero descriptivo (obligatorio)Clica el botón “Commit”. Aparecerá un cuadro emergente mostrando el éxito o un mensaje de error.Clica el botón “Commit”. Aparecerá un cuadro emergente mostrando el éxito o un mensaje de error.Ahora puedes hacer más cambios y más commits, tantas veces como quieras","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-github-desktop-3","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En Github Desktop","text":"Puedes ver la lista de los archivos que se han modificado la izquierda. Si seleccionas un archivo de texto, verás en el panel derecho un resumen de las modificaciones que se han hecho (la vista funcionará en archivos más complejos como .docs o .xlsx).Para añadir los cambios, basta con marcar la pequeña casilla situada junto los nombres de los archivos. Cuando hayas seleccionado los archivos que quieres añadir esta consolidación, dale un nombre la consolidación, opcionalmente una descripción y luego clica en el botón de commit.\nbutton.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-la-consola-1","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En la consola","text":"Las dos funciones que se utilizan entre bastidores son git add para seleccionar/poner en escena los archivos y git commit para hacer realmente el commit.","code":"git status # see the changes \n\ngit add new_pages/collaboration.Rmd  # selecciona los ficheros a (= stage los cambioss)\n\ngit commit -m \"Describe commit from Github Desktop\" # commit los cambios con un mensaje\n\ngit log  # ver información sobre los commits anteriores"},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"modificar-una-consolidación-anterior","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Modificar una consolidación anterior","text":"¿Qué sucede si confirmas algunos cambios, sigues trabajando y te das cuenta de que hiciste cambios que deberían “pertenecer” la consolidación anterior (en tu opinión)? temas! Puedes añadir estos cambios tu consolidación anterior.En Rstudio, debería ser bastante obvio, ya que hay una casilla “Amend previous commit” (modificar una consolidación anterior) en la misma línea que el botón COMMIT.Por alguna razón poco clara, la funcionalidad se ha implementado como tal en Github Desktop, pero hay una forma (conceptualmente incómoda pero fácil) de hacerlo. Si confirmado pero aún enviado tus cambios, aparece un botón “UNDO” justo debajo del botón COMMIT. Clica en él y revertirá tu consolidación (pero mantendrá sus archivos en etapa y tu mensaje de consolidación). Guarda los cambios, añade nuevos archivos la consolidación si es necesario y vuelva confirmar.En la consola:Note: think modifying commits already public shared collaborators.","code":"git add [YOUR FILES] # Stage your new changes\n\ngit commit --amend  # Amend the previous commit\n\ngit commit --amend -m \"An updated commit message\"  # Amend the previous commit AND update the commit message"},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"pull-and-push-changes-up-to-github","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.9 Actualizar los cambios con Github","text":"“Primero PULL (actualizar local), luego PUSH (actualizar reomto)”Es una buena práctica fetch y pull antes de empezar trabajar en tu proyecto, para actualizar la versión de la rama en tu equipo local con los cambios que se han hecho en la versión remota/Github.Pull menudo. dudes. Pull siempre antes de Push.Cuando los cambios estén hechos y confirmados y estés contento con el estado de tu proyecto, puedes enviar (push) tus consolidaciones la versión remota/Github de tu rama.Repite la operación mientras trabajas en el repositorio.Nota: es mucho más fácil revertir los cambios que fueron confirmados pero empujados (es decir, siguen siendo locales) que revertir los cambios que fueron empujados al repositorio remoto (y tal vez ya sacados por otra persona), por lo que es mejor empujar cuando haya terminado de introducir cambios en la tarea en la que estaba trabajando.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-rstudio-3","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En Rstudio","text":"PULL - En primer lugar, clica en el icono “Pull” (flecha hacia abajo) que busca y tira al mismo tiempo.PUSH – Clicando en el icono verde “Push” (flecha hacia arriba). Es posible que pida que introduzcas tu nombre de usuario y contraseña de Github. La primera vez que la pida, es posible que tenga que introducir dos líneas de comando Git en el Terminal:git config –global user.email\n“@example.com” (Github\nemail address), andgit config –global user.name “Github username”Para saber más sobre cómo introducir estos comandos, consulta la sección siguiente sobre comandos Git.SUGERENCIA: ¿Te piden la contraseña muy menudo? Consulta los capítulos 10 y 11 de este tutorial para conectarse un repositorio usando una clave SSH (más complicado)","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-github-desktop-4","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En Github Desktop","text":"Clica en el botón “Fetch origin” para comprobar si hay nuevos commits en el repositorio remoto.Si Git encuentra nuevos commits en el repositorio remoto, el botón cambiará un botón “Pull”. Dado que el mismo botón se utiliza para Pull y Push, puedes enviar tus cambios si descargas y actualizas antes.Puedes ir la pestaña “History” (cerca de la pestaña “Changes”) para ver todos los commits (los tuyos y los de los demás). Esta es una buena manera de conocer lo que hicieron tus colaboradores. Puedes leer el mensaje de consolidación, la descripción si la hay, y comparar el código de los dos archivos usando el panel diff.Una vez que se han extraído todos los cambios remotos y se ha consignado al menos un cambio local, se puede empujar clicando en el mismo botón.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"consola","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Consola","text":"Sin sorpresas, las órdenes son fetch, pull y push.","code":"git fetch  # ¿hay nuevos commits en el directorio remoto?\ngit pull   # Trae los commits remotos a tu rama local y la actualiza\ngit push   # Envía los commits locales de esta rama a la rama remota"},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"quiero-actualizarme-pero-tengo-trabajo-local","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Quiero actualizarme pero tengo trabajo local","text":"Esto puede ocurrir veces: hecho algunos cambios en tu repositorio local, pero el repositorio remoto tiene consolidaciones que descargado.Git rechazará hacer un pull porque podría sobrescribir tus cambios. Hay varias estrategias para guardar tus cambios, bien descritas en Happy Git R, entre las cuales las dos principales son:\n- Confirmar tus cambios, obtener los cambios remotos, extraerlos, resolver los conflictos si es necesario (ver la sección más abajo), y consolidar todo en línea\n- stash tus cambios, lo que en cierto modo los guarda un lado, pull, unstash (restaurar), y luego confirmar, resolver cualquier conflicto, y push.Si los archivos afectados por los cambios remotos y los archivos afectados por tus cambios locales se solapan, Git puede resolver los conflictos automáticamente.En Github Desktop, esto se puede hacer con botones. Para almacenar, ve Branch > Stash changes.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"merge-branch-into-main","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.10 Combinar la rama con la principal","text":"Si terminado de hacer cambios, puedes comenzar el proceso de fusión de esos cambios en la rama principal. Dependiendo de su situación, esto puede ser rápido, o puede tener pasos deliberados de revisión y aprobación que involucren compañeros de equipo.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"localmente-en-github-desktop","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Localmente en Github Desktop","text":"Se pueden fusionar ramas localmente usando Github Desktop. Primero, ve (checkout) la rama que será la destinataria de los commits, es decir, la rama que quieres actualizar. continuación, clica en el menú Branch > Merge current branch. Un cuadro te permitirá seleccionar la rama desde la que quieres importar.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-la-consola-2","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En la consola","text":"Primero, vuelve la rama que será la destinataria de los cambios. Normalmente es la rama maestra (main), pero puede ser otra rama. Luego fusiona tu rama de trabajo con la maestra.Esta página muestra un ejemplo más avanzado de bifurcación y explica un poco lo que ocurre entre bastidores.","code":"git checkout master  # Go back to master (or to the branch you want to move your )\ngit merge this_fancy_new_branch"},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-github-envío-de-pull-requests","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En Github: envío de pull requests","text":"Aunque es totalmente posible fusionar dos ramas localmente, o sin informar nadie, una fusión puede ser discutida o investigada por varias personas antes de ser integrada en la rama maestra. Para ayudar en el proceso, Github ofrece algunas funciones de discusión en torno la fusión: el pull request.Un pull request (un “PR”) es una solicitud para fusionar una rama con otra (en otras palabras, una solicitud para que tu rama de trabajo se incorpore la rama “principal”). Una solicitud de extracción suele incluir varias consolidaciones. Un pull request suele iniciar un proceso de conversación y revisión antes de que sea aceptado y la rama sea fusionada. Por ejemplo, puedes leer las discusiones sobre pull requests en el github de dplyr.Puedes enviar una solicitud de extracción (PR) directamente desde el sitio web (como se ilustra continuación) o desde Github Desktop.Ir al repositorio Github (en línea)Ve la pestaña “Pull Requests” y clica en el botón “New pull request”.Selecciona en el menú desplegable para fusionar su rama en la principalEscribe un comentario detallado sobre la solicitud de extracción y clica en “Crear solicitud de extracción”.En la imagen siguiente, se ha seleccionado la rama “forests” para fusionarla con la “principal”:Ahora se debería poder ver el pull request (imagen de ejemplo abajo):Revisa la pestaña “Files changed” (Archivos cambiados) para ver cómo cambiaría la rama “principal” si se fusionara la rama.la derecha, puedes solicitar una revisión los miembros de tu equipo etiquetando su ID de Github. Si quieres, puedes configurar el repositorio para que se requiera una revisión de aprobación para poder fusionarlo con el principal.Una vez aprobada la solicitud de extracción, se activará un botón para “Merge pull request” (fusionar la solicitud de extracción). Clica en él.Una vez completado, elimina tu rama como se explica continuación.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"resolución-de-conflictos","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Resolución de conflictos","text":"Cuando dos personas modifican la(s) misma(s) línea(s) al mismo tiempo, surge un conflicto de fusión. De hecho, Git se niega tomar una decisión sobre qué versión mantener, pero te ayuda encontrar dónde está el conflicto. TE ASUSTES. La mayoría de las veces, es bastante sencillo de resolver.Por ejemplo, en Github:Después de que la fusión haya planteado un conflicto, abre el archivo en tu editor favorito. El conflicto se indicará con una serie de caracteres:El texto entre <<<<<<< HEAD y ======= proviene de tu repositorio local, y el que está entre ======= y >>>>>>> de la otra rama (que puede ser origin, master o cualquier rama de tu elección).Tienes que decidir qué versión del código prefieres (o incluso escribir una tercera, incluyendo los cambios de ambas partes si es pertinente), borrar el resto y eliminar todas las marcas que Git ha añadido (<<<<<<< HEAD, =======, >>>>>>> origin/master/tu_nombre_de_rama).continuación, guarda el archivo, estadíalo y haz un commit: este es el commit que hace que la versión fusionada sea “oficial”. te olvides de hacer push después.Cuanto más menudo hagáis pull y push tú y tus colaboradores, menores serán los conflictos.Nota: Si te sientes cómodo con la consola, existen opciones avanzadas de fusión (por ejemplo, ignorar los espacios en blanco, dar prioridad un colaborador, etc.).","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"borrar-tu-rama","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Borrar tu rama","text":"Una vez que una rama se ha fusionado con la maestra y ya es necesaria, puedes eliminarla.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"github-rstudio","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Github + Rstudio","text":"Ve al repositorio en Github y clica en el botón para ver todas las ramas (junto al desplegable para seleccionar ramas). Ahora busca tu rama y clica en el icono de la papelera junto ella. Lee más detalles sobre cómo eliminar una rama aquí.Asegúrate de eliminar también la rama localmente en tu ordenador. Esto ocurrirá automáticamente.Desde RStudio, asegúrese de estar en la rama principalCambia para escribir los comandos Git en la “Terminal” de RStudio (la pestaña adyacente la consola de R), y escribe: git branch -d nombre_de_rama, donde “nombre_de_rama” es el nombre de la rama eliminarActualiza tu pestaña Git y la rama debería desaparecer","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"en-github-desktop-5","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"En Github Desktop","text":"Sólo tienes que comprobar la rama que quieres eliminar, e ir al menú\nBranch > Delete.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"bifurcación","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Bifurcación","text":"Puedes bifurcar (fork) un proyecto si quieres contribuir él pero tienes los derechos para hacerlo, o si sólo quieres modificarlo para tu uso personal. Puedes encontrar una breve descripción de la bifurcación aquí.En Github, clica en el botón “Fork”:Esto clonará el repositorio original, pero en tu propio perfil. Así que ahora hay dos versiones del repositorio en Github: la original, que puedes modificar, y la versión clonada en tu perfil.Entonces, puedes clonar tu versión del repositorio en línea localmente en tu ordenador, utilizando cualquiera de los métodos descritos en las secciones anteriores. Luego, puede crear una nueva rama, hacer cambios, confirmarlos y empujarlos tu repositorio remoto.Una vez que estés contento con el resultado, puedes crear un Pull Request desde Github o Github Desktop para iniciar la conversación con los propietarios/mantenedores del repositorio original.¿Y si necesitas algunos commits más recientes del repositorio oficial?Imagina que alguien hace una modificación crítica en el repositorio oficial, que quieres incluir en tu versión clonada. Es posible sincronizar tu fork con el repositorio oficial. Implica usar el terminal, pero es demasiado complicado. Principalmente necesitas recordar que - upstream = el repositorio oficial, el que podido modificar - origin = tu versión del repositorio en tu perfil de GithubPuedes leer este tutorial o seguirlo continuación:Primero, escribe en tu terminal Git (dentro de tu repo):Si aún configurado el repositorio upstream deberías ver dos líneas, que comienzan por origin. Muestran el repositorio remoto al que apuntan fetch y push. Recuerda que origin es el apodo convencional para tu propia versión del repositorio en Github. Por ejemplo:Ahora, añade un nuevo repositorio remoto:Aquí la dirección es la que genera Github cuando clonas un repositorio (ver sección de clonación). Ahora tendrás cuatro punteros remotos:Ahora que la configuración está hecha, siempre que quieras obtener los cambios del repositorio original (upstream), sólo tienes que ir (checkout) la rama que quieres actualizar y teclear:Si hay conflictos, tendrá que resolverlos, tal y como se explica en la sección Resolución de conflictos.Resumen: forking es clonación, pero en el lado del servidor de Github. El resto de las acciones son las típicas del flujo de trabajo de colaboración (clonar, empujar, tirar, confirmar, fusionar, enviar solicitudes de extracción…).Nota: aunque la bifurcación es un concepto, un comando de Git, también existe en otros hosts web, como Bitbucket.","code":"git remote -vgit remote add upstream https://github.com/epirhandbook/Epi_R_handbook.gitgit fetch upstream # Obtener los nuevos commits del repositorio remoto\ngit checkout the_branch_you_want_to_update\ngit merge upstream/the_branch_you_want_to_update  # Fusiona la rama de upstream en tu rama..\ngit push # Actualiza tu propia versión del repositorio remoto"},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"what-we-learned","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.11 Lo que hemos aprendido","text":"aprendido :Configurar Git para rastrear las modificaciones en tus carpetas,Conectar tu repositorio local un repositorio remoto en línea,Confirmar los cambios,Sincronizar tus repositorios locales y remotos.Todo esto debería ayudar ponerte en marcha y ser suficiente para la mayoría de tus necesidades de análisis epidemiológico. Normalmente tenemos un uso tan avanzado como los desarrolladores.Sin embargo, debes saber que si quieres (o necesitas) ir más allá, Git ofrece más potencia para simplificar los historiales de commit, revertir uno o varios commits, hacer cherry-pick de commits, etc. Algunas cosas pueden parecer pura magia, pero ahora que tienes los fundamentos, es más fácil construir sobre ellos.Ten en cuenta que mientras el panel Git en Rstudio y Github Desktop son buenos para los principiantes / uso diario en nuestra línea de trabajo, ofrecen una interfaz para algunas de las funciones intermedias / avanzadas de Git. Algunas interfaces más completas permiten hacer más cosas con apuntar y clicar (normalmente costa de un diseño más complejo).Recuerda que, dado que puedes utilizar cualquier herramienta en cualquier momento para realizar el seguimiento de tu repositorio, puedes instalar muy fácilmente una interfaz para probarla veces, o para realizar alguna tarea compleja menos común ocasionalmente, mientras prefieres una interfaz simplificada para el resto del tiempo (por ejemplo, utilizando Github Desktop la mayor parte del tiempo, y cambiando SourceTree o Gitbash para algunas tareas específicas).","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"git","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.12 Comandos Git","text":"","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"aprendizaje-recomendado","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Aprendizaje recomendado","text":"Para aprender los comandos de Git en un tutorial interactivo, consulta este sitio web.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"dónde-escribir-los-comandos","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"¿Dónde escribir los comandos?","text":"Se introducen comandos en un entorno Git.Opción 1 Puedes abrir una nueva Terminal en RStudio. Esta pestaña está al lado de la Consola R. Si puedes escribir ningún texto en ella, clica en el menú desplegable debajo de “Terminal” y selecciona “Nueva terminal”. Escribe los comandos en el espacio parpadeante delante del signo de dólar “$”.Opción 2 También puede abrir un shell (un terminal para introducir comandos) clicando en el icono azul de “engranajes” en la pestaña Git (cerca del entorno de RStudio). Selecciona “Shell” en el menú desplegable. Se abrirá una nueva ventana en la que puedes escribir los comandos después del signo de dólar “$”.Opción 3 Clica con el botón derecho para abrir “Git Bash ” que abrirá el mismo tipo de terminal, o abra Git Bash desde tu lista de aplicaciones. Más información para principiantes sobre Git Bash, cómo encontrarlo y algunos comandos bash que necesitarás.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"ejemplos-de-comandos","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"Ejemplos de comandos","text":"continuación presentamos algunos comandos git comunes. Cuando los uses, ten en cuenta qué rama está activa (check-), ¡ya que eso cambiará la acción!En los comandos de abajo, representa un nombre de rama. representa el hash ID de un commit específico. representa un número. escriba los símbolos < o >.","code":""},{"path":"version-control-and-collaboration-with-git-and-github.html","id":"resources-6","chapter":"3 Control de versiones y colaboración con Git y Github","heading":"3.13 Recursos","text":"Gran parte de esta página está inspirada en “Happy Git R”\nwebsite Jenny Bryan. Hay una sección muy útil de este sitio web que te ayuda solucionar errores comunes relacionados con Git y R.La documentación y guía de inicio de Github.com..La hoja de trucos de RStudio “IDE”\ncheatsheet\nque incluye consejos sobre Git con RStudio.https://ohi-science.org/news/github-going-back--timeComandos Git para principiantesUn tutorial interactivo para aprender los comandos de Git.https://www.freecodecamp.org/news/-introduction--git--absolute-beginners-86fa1d32ff71/:\nbueno para aprender los fundamentos absolutos para rastrear los cambios en una carpeta en\nen tu propio ordenador.Buen esquema para entender las ramas:\nhttps://speakerdeck.com/alicebartlett/git--humansTutoriales que cubren temas básicos y más avanzados*https://tutorialzine.com/2016/06/learn-git--30-minuteshttps://dzone.com/articles/git-tutorial-commands--operations--git\nhttps://swcarpentry.github.io/git-novice/ (short course)\nhttps://rsjakob.gitbooks.io/git/content/chapter1.htmlEl libro Pro Git está considerado como una referencia oficial.\nAunque algunos capítulos están bien, suele ser un poco técnico. Probablemente es un buen recurso\nuna vez que hayas usado un poco Git y quieras aprender con un poco más de precisión\nlo que sucede y cómo ir más allá.","code":""},{"path":"common-errors.html","id":"common-errors","chapter":"4 Errores comunes","heading":"4 Errores comunes","text":"Esta página incluye una lista actualizada de los errores más comunes y sugiere soluciones para solucionarlos.","code":""},{"path":"common-errors.html","id":"interpreting-error-messages","chapter":"4 Errores comunes","heading":"4.1 Interpretación de los mensajes de error","text":"Los mensajes de error de R pueden ser crípticos veces, así que Google es tu amigo. Busca el mensaje de error con “R” y busca publicaciones recientes en StackExchange.com, stackoverflow.com, community.rstudio.com, twitter (#rstats) y otros foros utilizados por los programadores para archivar preguntas y respuestas. Intenta encontrar publicaciones recientes que hayan resuelto problemas similares.Si después de mucho buscar encuentras una respuesta tu problema, considera la posibilidad de crear un ejemplo reproducible (“reprex”) y publicar tú mismo la pregunta. Consulta la página sobre Cómo obtener ayuda para obtener consejos sobre cómo crear y publicar un ejemplo reproducible en los foros.","code":""},{"path":"common-errors.html","id":"common-errors-1","chapter":"4 Errores comunes","heading":"4.2 Errores comunes","text":"continuación, enumeramos algunos errores comunes y posibles explicaciones/soluciones. Algunos de ellos se han tomado prestados de Noam Ross, que analizó los mensajes más comunes del foro en Stack Overflow sobre los mensajes de error de R (véase el análisis aquí)","code":""},{"path":"common-errors.html","id":"errores-tipográficos","chapter":"4 Errores comunes","heading":"Errores tipográficos","text":"Si aparece “unexpected symbol” (símbolo inesperado), comprueba si faltan comas","code":"Error: unexpected symbol in:\n\"  geom_histogram(stat = \"identity\")+\n  tidyquant::geom_ma(n=7, size = 2, color = \"red\" lty\""},{"path":"common-errors.html","id":"errores-del-paquete","chapter":"4 Errores comunes","heading":"Errores del paquete","text":"Esto probablemente significa que escrito mal el nombre de la función, o que olvidado instalar o cargar un paquete.Crees que estás usando dplyr::select() pero la función select() ha sido enmascarada por MASS::select() - especifica dplyr:: o reordena la carga de tu paquete para que dplyr esté después de todos los demás.Otros errores de enmascaramiento comunes provienen de: plyr::summarise() y stats::filter(). Considere la posibilidad de utilizar el paquete conflicted.Si recibes un error diciendo que necesitas eliminar un archivo “00LOCK”, ve tu biblioteca “R” en el directorio de tu ordenador (por ejemplo, R/win-library/) y busca una carpeta llamada “00LOCK”. Elimínala manualmente e intenta instalar el paquete de nuevo. Es probable que un proceso de instalación anterior se haya interrumpido, provocando este error.","code":"could not find function \"x\"...Error in select(data, var) : unused argument (var)Error in install.packages : ERROR: failed to lock directory ‘C:\\Users\\Name\\Documents\\R\\win-library\\4.0’ for modifying\nTry removing ‘C:\\Users\\Name\\Documents\\R\\win-library\\4.0/00LOCK’"},{"path":"common-errors.html","id":"errores-en-los-objetos","chapter":"4 Errores comunes","heading":"Errores en los objetos","text":"Si ves un error como este cuando intentas exportar o importar: Comprueba la ortografía del archivo y de la ruta de acceso, y si la ruta contiene barras inclinadas, asegúrese de que son hacia delante / y hacia atrás \\. Asegúrate también de que utilizado la extensión de archivo correcta (por ejemplo, .csv, .xlsx).Esto significa que el objeto al que se hace referencia existe. ¿Quizá el código anterior se ha ejecutado correctamente?Esto significa que intentado acceder algo (un elemento de un vector o una lista) que estaba allí.","code":"No such file or directory:object 'x' not found Error in 'x': subscript out of bounds"},{"path":"common-errors.html","id":"errores-de-sintaxis-de-las-funciones","chapter":"4 Errores comunes","heading":"Errores de sintaxis de las funciones","text":"Este error de arriba (argument .x missing, default) es común en mutate() si estás suministrando una función como recode() o replace_na() donde se espera que proporciones el nombre de la columna como primer argumento. Esto es fácil de olvidar.","code":"# ejecuta recode sin reiniciar la variable x en mutate(x = recode(x, OLD = NEW)\nError: Problem with `mutate()` input `hospital`.\nx argument \".x\" is missing, with no default\ni Input `hospital` is `recode(...)`."},{"path":"common-errors.html","id":"errores-lógicos","chapter":"4 Errores comunes","heading":"Errores lógicos","text":"Esto probablemente significa que se aplicó una sentencia algo que era TRUE o FALSE.","code":"Error in if"},{"path":"common-errors.html","id":"errores-de-los-factores","chapter":"4 Errores comunes","heading":"Errores de los factores","text":"Si ves este error sobre niveles de factor válidos, es probable que tengas una columna de tipo Factor (que contiene niveles predefinidos) y hayas intentado añadirle un nuevo valor. Conviértela al tipo Carácter antes de añadir un nuevo valor.","code":"#Trató de añadir un valor (\"Missing\") a un factor (con replace_na operando en un factor)\nProblem with `mutate()` input `age_cat`.\ni invalid factor level, NA generated\ni Input `age_cat` is `replace_na(age_cat, \"Missing\")`.invalid factor level, NA generated"},{"path":"common-errors.html","id":"errores-de-trazado","chapter":"4 Errores comunes","heading":"Errores de trazado","text":"Error: Insufficient values manual scale. 3 needed 2 provided.\nggplot() scale_fill_manual() values = c(“orange”, “purple”) … insuficiente para el número de niveles del factor … considera si NA es ahora un nivel del factor…Probablemente tienes un + extra al final de un comando ggplot que necesitas eliminar.","code":"Can't add x object"},{"path":"common-errors.html","id":"errores-de-r-markdown","chapter":"4 Errores comunes","heading":"Errores de R Markdown","text":"Si el mensaje de error contiene algo como Error en options[sprintf(\"fig.%s\", )]], comprueba que tus opciones knitr en la parte superior de cada chunk utilizan correctamente .width = o .height =y fig.width= y fig.height=.","code":""},{"path":"common-errors.html","id":"miscelánea","chapter":"4 Errores comunes","heading":"Miscelánea","text":"Comprueba si reordenado los verbos dplyr y reemplazado un pipe en el medio, o eliminado un pipe del final después de reordenar.","code":""},{"path":"common-errors.html","id":"resources-39","chapter":"4 Errores comunes","heading":"4.3 Recursos","text":"Esta es otra entrada del blog que enumera los errores comunes de programación en R los que se enfrentan los principiantes","code":""},{"path":"getting-help.html","id":"getting-help","chapter":"5 Cómo obtener ayuda","heading":"5 Cómo obtener ayuda","text":"page covers get help posting Github issue posting reproducible example (“reprex”) online forum.","code":""},{"path":"getting-help.html","id":"github-issues","chapter":"5 Cómo obtener ayuda","heading":"5.1 Issues en Github","text":"Muchos paquetes y proyectos de R tienen su código alojado en el sitio web Github.com. Puedes comunicarte directamente con los autores través de este sitio web publicando un “Issue”.Lee más sobre cómo almacenar tu trabajo en Github en la página Colaboración y Github.En Github, cada proyecto está contenido en un repositorio. Cada repositorio contiene código, datos, resultados, documentación de ayuda, etc. También hay un vehículo para comunicarse con los autores llamado “Issues”.Mira continuación la página de Github del paquete incidence2 (utilizado para hacer curvas epidémicas). Puedes ver la pestaña “Issues” resaltada en amarillo. Puedes ver que hay 5 temas abiertos.Una vez en la pestaña de problemas, podrás ver los problemas abiertos. Revísalas para asegurarte de que tu problema ha sido ya tratado. Puedes abrir una nueva incidencia clicando en el botón verde de la derecha. Necesitarás una cuenta de Github para hacerlo.En tu Issue, sigue las instrucciones que aparecen continuación para proporcionar un ejemplo mínimo y reproducible. Y, por favor, ¡se cortés! La mayoría de las personas que desarrollan paquetes y proyectos de R lo hacen en su tiempo libre (¡como este manual!).Para leer más materiales avanzados sobre el manejo de problemas en tu propio repositorio de Github, consulta su documentación sobre Problemas.","code":""},{"path":"getting-help.html","id":"reproducible-example","chapter":"5 Cómo obtener ayuda","heading":"5.2 Ejemplo reproducible","text":"Proporcionar un ejemplo reproducible (“reprex”) es la clave para obtener ayuda cuando se publica en un foro o en un Issue de Github. La gente quiere ayudarte, pero tienes que darles un ejemplo con el que puedan trabajar en su propio ordenador. El ejemplo debe:Demostrar el problema que encontradoSer mínimo, en el sentido de que incluya sólo los datos y el código necesarios para reproducir el problemaSer reproducible, de manera que se incluyan todos los objetos (por ejemplo, los datos), las llamadas al paquete (por ejemplo, library() o p_load())Además, ¡asegúrese de publicar ningún dato sensible con el reprex! Puedes crear dataframes de ejemplo, o utilizar uno de los dataframes incorporados en R (escribe data() para ver una lista de estos set de datos).","code":""},{"path":"getting-help.html","id":"el-paquete-reprex","chapter":"5 Cómo obtener ayuda","heading":"El paquete reprex","text":"El paquete reprex puede ayudarte crear un ejemplo reproducible:reprex se instala con tidyverse, así que carga cualquiera de los dos paquetesInicia un script de R que cree el problema, paso paso, empezando por la carga de paquetes y datos.Copia todo el código en tu portapapeles y ejecuta el siguiente comando:Verás que aparece una salida HTML en el panel del visor de RStudio. Contendrá todo tu código y cualquier advertencia, error o salida de gráficos. Esta salida también se copia en el portapapeles, por lo que puedes publicarla directamente en un Issue de Github o en un mensaje del foro.Si estableces session_info = TRUE se incluirá la salida de sessioninfo::session_info() con tus versiones de R y del paquete utilizadoPuedes proporcionar un directorio de trabajo con wd =Puedes leer más sobre los argumentos y las posibles variaciones en esta página o introduciendo ?reprexEn el ejemplo anterior, el comando ggplot() se ejecutó porque el argumento date_format = es correcto - debería ser date_labels =.","code":"\n# install/load tidyverse (which includes reprex)\npacman::p_load(tidyverse)\n# cargar paquetes\npacman::p_load(\n     tidyverse,  # gestión y visualización de datos\n     outbreaks)  # datos de ejemplo de brotes\n\n#  lista de casos del brote de gripe\noutbreak_raw <- outbreaks::fluH7N9_china_2013  # obtener datos del paquete de brotes\n\n# Limpiar los datos\noutbreak <- outbreak_raw %>% \n     mutate(across(contains(\"date\"), as.Date))\n\n# Graficar el brote\n\nggplot(data = outbreak)+\n     geom_histogram(\n          mapping = aes(x = date_of_onset),\n          binwidth = 7\n     )+\n  scale_x_date(\n    date_format = \"%d %m\"\n  )\nreprex::reprex()"},{"path":"getting-help.html","id":"datos-mínimos","chapter":"5 Cómo obtener ayuda","heading":"Datos mínimos","text":"Los revisores tienen que ser capaces de utilizar tus datos - idealmente tienen que ser capaces de crearlos con código.Para crear unos datos mínimos, considera la posibilidad de anonimizarlos y utilizar sólo un subconjunto de las observaciones.EN CONSTRUCCIÓN - también puede utilizar la función dput() para crear unos datos mínimo.","code":""},{"path":"getting-help.html","id":"posting-to-a-forum","chapter":"5 Cómo obtener ayuda","heading":"5.3 Publicar en un foro","text":"Lee muchos mensajes de foros. Comprende qué mensajes están bien escritos y cuáles .En primer lugar, decide si vas formular la pregunta. revisado fondo el sitio web del foro, probando con varios términos de búsqueda, para ver si tu pregunta ya ha sido formulada?En primer lugar, decide si vas formular la pregunta. revisado fondo el sitio web del foro, probando con varios términos de búsqueda, para ver si tu pregunta ya ha sido formulada?Dale tu pregunta un título informativo (“¡Ayuda! esto funciona”).Dale tu pregunta un título informativo (“¡Ayuda! esto funciona”).Escribe tu pregunta:Escribe tu pregunta:Presenta la situación y tu problemaEnlaza con posts de temas similares y explica cómo responden tu preguntaIncluye cualquier información relevante para ayudar alguien que conozca el contexto de tu trabajoDa un ejemplo mínimo reproducible con la información de tu sesión de RUtiliza la ortografía, la gramática y la puntuación adecuadas, y divide tu pregunta en párrafos para que sea más fácil de leerSupervisa tu pregunta una vez publicada para responder cualquier solicitud de aclaración. Se cortés y amable: menudo las personas que responden están ofreciendo su tiempo para ayudarte. Si tienes una pregunta de seguimiento, piensa si debe ser una pregunta publicada por separado.Supervisa tu pregunta una vez publicada para responder cualquier solicitud de aclaración. Se cortés y amable: menudo las personas que responden están ofreciendo su tiempo para ayudarte. Si tienes una pregunta de seguimiento, piensa si debe ser una pregunta publicada por separado.Marca la pregunta como respondida, si obtienes una respuesta que satisfaga la petición original. Esto ayuda que otros reconozcan más tarde rápidamente la solución.Marca la pregunta como respondida, si obtienes una respuesta que satisfaga la petición original. Esto ayuda que otros reconozcan más tarde rápidamente la solución.Lee estos posts sobre cómo hacer una buena pregunta el código de conducta de Stack overflow.","code":""},{"path":"getting-help.html","id":"resources-40","chapter":"5 Cómo obtener ayuda","heading":"5.4 Recursos","text":"Página de Tidyverse sobre cómo obtener ayudaConsejos para elaborar unos datos mínimosDocumentación de la función dput","code":""},{"path":"r-on-network-drives.html","id":"r-on-network-drives","chapter":"6 R en redes locales","heading":"6 R en redes locales","text":"","code":""},{"path":"r-on-network-drives.html","id":"overview-9","chapter":"6 R en redes locales","heading":"6.1 Resumen","text":"El uso de R en unidades compartidas de la red o de la “empresa” puede presentar desafíos adicionales. Esta página contiene enfoques, errores comunes y sugerencias sobre la solución de problemas obtenidas partir de nuestra experiencia trabajando con estos problemas. Se incluyen consejos para las situaciones especialmente delicadas relacionadas con R Markdown.Uso de R en unidades de red: Principios generalesDebes tener acceso de administrador tu ordenador. Configura RStudio específicamente para que se ejecute como administrador.Guarda los paquetes en una biblioteca en una unidad con letras (por ejemplo, “C:”) cuando sea posible. Uiliza lo menos posible una biblioteca de paquetes cuya ruta comience por “\\\".El paquete rmarkdown debe estar en una librería de paquetes “\\\", ya que entonces puede conectarse TinyTex o Pandoc.","code":""},{"path":"r-on-network-drives.html","id":"rstudio-as-administrator","chapter":"6 R en redes locales","heading":"6.2 RStudio como administrador","text":"Cuando clicas en el icono de RStudio para abrirlo, hazlo clicando con el botón derecho. Dependiendo de tu máquina, puedes ver una opción para “Ejecutar como administrador”. O si , puedes ver una opción para seleccionar Propiedades (entonces debería aparecer una ventana con la opción “Compatibilidad”, y selecciona una casilla de verificación “Ejecutar como administrador”).","code":""},{"path":"r-on-network-drives.html","id":"useful-commands","chapter":"6 R en redes locales","heading":"6.3 Comandos útiles","text":"continuación se presentan algunos comandos útiles cuando se trata de solucionar problemas utilizando R en unidades de red.Puedes devolver la(s) ruta(s) las bibliotecas de paquetes que R está utilizando. Serán listadas en el orden que R está usando para instalar/cargar/buscar paquetes. Por lo tanto, si quieres que R utilice una biblioteca diferente por defecto, puedes cambiar el orden de estas rutas (ver más abajo).Es posible que desees cambiar el orden de las bibliotecas de paquetes utilizados por R. Por ejemplo, si R está recogiendo una ubicación de la biblioteca que comienza con “\\\" y uno que comienza con una letra, por ejemplo,”D:“. Puedes ajustar el orden de .libPaths() con el siguiente código.Si tienes dificultades para que R Markdown se conecte Pandoc, comienza con este código para averiguar dónde cree RStudio que está tu instalación de Pandoc.Si quieres ver de qué biblioteca se está cargando un paquete, prueba con el siguiente código:","code":"\n# Find libraries\n.libPaths()                   # Your library paths, listed in order that R installs/searches. \n                              # Note: all libraries will be listed, but to install to some (e.g. C:) you \n                              # may need to be running RStudio as an administrator (it won't appear in the \n                              # install packages library drop-down menu) \n# Switch order of libraries\n# this can effect the priority of R finding a package. E.g. you may want your C: library to be listed first\nmyPaths <- .libPaths() # get the paths\nmyPaths <- c(myPaths[2], myPaths[1]) # switch them\n.libPaths(myPaths) # reassign them\n# Find Pandoc\nSys.getenv(\"RSTUDIO_PANDOC\")  # Find where RStudio thinks your Pandoc installation is\n# Find a package\n# gives first location of package (note order of your libraries)\nfind.package(\"rmarkdown\", lib.loc = NULL, quiet = FALSE, verbose = getOption(\"verbose\")) "},{"path":"r-on-network-drives.html","id":"troubleshooting-common-errors","chapter":"6 R en redes locales","heading":"6.4 Solución de errores comunes","text":"“Fallo al compilar…tex en rmarkdown”Comprueba la instalación de TinyTex, o instala TinyTex en la ubicación C:. Consulta la página de fundamentos de R sobre cómo instalar TinyTex.se pueden cargar las rutinas de Internet.Por ejemplo, Error tools::startDynamicHelp() : internet routines loadedIntenta seleccionar la versión de 32 bits de RStudio través de Herramientas/Opciones Globales.\nnota: si la versión de 32 bits aparece en el menú, asegúrate que está utilizando RStudio v1.2.\nnota: si la versión de 32 bits aparece en el menú, asegúrate que está utilizando RStudio v1.2.Alternativamente, intenta desinstalar R y volver instalarlo con una versión de bits diferente (32 en lugar de 64)C: la biblioteca aparece como opción cuando intento instalar los paquetes manualmenteEjecuta RStudio como administrador, entonces aparecerá esta opción.Para configurar RStudio para que se ejecute siempre como administrador (lo que resulta ventajoso cuando se utiliza un proyecto R en el que se clica en el icono de RStudio para abrirlo)… clica con el botón derecho en el icono de RstudioLa imagen siguiente muestra cómo puedes seleccionar manualmente la biblioteca en la que instalar un paquete. Esta ventana aparece cuando se abre el panel de paquetes de RStudio y se clica en “Install”.Error Pandoc 1Si aparece el error “pandoc error 1” al ejecutar R Markdowns scripts en unidades de red:De las múltiples ubicaciones de las bibliotecas, que aparezca en primer lugar la que tenga una unidad de disco con letras (véanse los códigos anteriores)La solución anterior funciona en una unidad de red local, si establece la conexión Internet en la redMira más consejos aquí: https://ciser.cornell.edu/rmarkdown-knit--html-word-pdf/Error Pandoc 83El error será algo así: find file...rmarkdown...lua.... Esto significa que se ha podido encontrar este archivo.Ver https://stackoverflow.com/questions/58830927/rmarkdown-unable--locate-lua-filter--knitting--wordPosibilidades:El paquete Rmarkdown está instaladoEl paquete Rmarkdown se encuentraUn problema de derechos de administración.Es posible que R sea capaz de encontrar el archivo del paquete rmarkdown, así que comprueba en qué biblioteca está el paquete rmarkdown (vearel código anterior). Si el paquete está instalado en una biblioteca inaccesible (por ejemplo, comienza con “\\\") considera moverlo manualmente C: o otra biblioteca con nombre. Ten en cuenta que el paquete rmarkdown tiene que ser capaz de conectarse la instalación de TinyTex, por lo que puede valojarse en una biblioteca en una unidad de red.Error Pandoc 61Por ejemplo: Error: pandoc document conversion failed error 61 o fetch...Prueba ejecutar RStudio como administrador (clica con el botón derecho en el icono, selecciona ejecutar como administrador, vea las instrucciones anteriores)Ver también si el paquete específico que pudo ser alcanzado puede ser movido la biblioteca C:.Error de LaTex (ver más abajo)Un error como: ! Package pdftex.def Error: File 'cict_qm2_2020-06-29_files/figure-latex/unnamed-chunk-5-1.png' found: using draft setting. o Error: LaTeX failed compile file_name.tex.Consulta https://yihui.org/tinytex/r/#debugging para obtener consejos de depuración.Ver file_name.log para más información.Error Pandoc 127Podría tratarse de un problema de RAM (espacio). Reinicia tu sesión de R e inténtelo de nuevo.Asignación de unidades de redMapear una unidad de red puede ser arriesgado. Consulta con tu departamento de TI antes de intentarlo.Un consejo tomado de este foro de discusión:¿Cómo se abre un archivo “través de una unidad de red asignada”?En primer lugar, tendrás que conocer la ubicación de la red la que intentas acceder.continuación, en el administrador de archivos de Windows, deberás clicar con el botón derecho en “Este PC” en el panel de la derecha, y seleccionar “Asignar una unidad de red”.Asigna la ubicación de red como una letra de unidad.Ahora tienes dos maneras de llegar al archivo que estás abriendo. Usar la ruta de la letra de la unidad debería funcionar.Error install.packages()Si obtienes un error que incluya la mención de un directorio de “bloqueo”, por ejemplo Error install.packages : ERROR: failed lock directory...Busca en tu biblioteca de paquetes y verás una carpeta cuyo nombre empieza por “00LOCK”. Prueba los siguientes consejos:Elimina manualmente el directorio de la carpeta “00LOCK” de tu biblioteca de paquetes. Intenta instalar el paquete de nuevo.También puedes probar el comando pacman::p_unlock() (también puedes poner este comando en el Rprofile para que se ejecute cada vez que se abra el proyecto). Luego intenta instalar el paquete de nuevo. Puedes necesitar varios intentos.Prueba ejecutar RStudio en modo de administrador e intenta instalar los paquetes uno por uno.Si todo lo demás falla, instala el paquete en otra biblioteca o carpeta (por ejemplo, Temp) y luego copia manualmente la carpeta del paquete en la biblioteca deseada.","code":"\n# check/install tinytex, to C: location\ntinytex::install_tinytex()\ntinytex:::is_tinytex() # should return TRUE (note three colons)"},{"path":"data-table.html","id":"data-table","chapter":"7 Data Table","heading":"7 Data Table","text":"El manual se centra en las funciones “verbales” de dplyr y en el operador pipe %>% de magrittr como método para limpiar y agrupar datos, pero el paquete data.table ofrece un método alternativo que puedes encontrar en tu recorrido con R.","code":""},{"path":"data-table.html","id":"intro-to-data-tables","chapter":"7 Data Table","heading":"7.1 Introducción a data.table","text":"Una tabla de datos es una estructura de datos bidimensional como un dataframe que permite realizar operaciones de agrupación complejas. La sintaxis de data.table está estructurada de forma que se puedan realizar operaciones sobre filas, columnas y grupos.La estructura es DT[, j, ], separada por 3 partes; los argumentos , j y . El argumento permite subconjuntar las filas necesarias, el argumento j permite operar sobre las columnas y el argumento permite operar sobre las columnas por grupos.En esta página se tratarán los siguientes temas:Importación de datos y uso de fread() y fwrite()Selección y filtrado de filas mediante el argumento iUso de las funciones de ayuda %like%, %chin%, %%Selección y cálculo de columnas con el argumento jCálculo por grupos utilizando el argumento byAñadir y actualizar datos las tablas de datos utilizando :=","code":""},{"path":"data-table.html","id":"load-packages-and-import-data","chapter":"7 Data Table","heading":"7.2 Cargar paquetes e importar datos","text":"","code":""},{"path":"data-table.html","id":"cargar-paquetes-1","chapter":"7 Data Table","heading":"Cargar paquetes","text":"Utilizando la función p_load() de pacman, cargamos (e instalamos si es necesario) los paquetes necesarios para este análisis.","code":"\npacman::p_load(\n  rio,        # to import data\n  data.table, # to group and clean data\n  tidyverse,  # allows use of pipe (%>%) function in this chapter\n  here \n  ) "},{"path":"data-table.html","id":"importar-datos-1","chapter":"7 Data Table","heading":"Importar datos","text":"Esta página explorará algunas de las funciones principales de data.table utilizando la lista de casos referenciados lo largo del manual.Importamos los datos de casos de una epidemia de ébola simulada. Si deseas descargar los datos para seguirlos paso paso, consulta las instrucciones en la página [Descargar libro y datos]. Los datos se importan mediante la función import() del paquete rio. Consulta la página sobre importación y exportación para conocer las distintas formas de importar datos. partir de aquí utilizamos data.table() para convertir el dataframe en una data.table.La función fread() se utiliza para importar directamente archivos delimitados regulares, como los archivos .csv, directamente un formato de tabla de datos. Esta función, y su homóloga, fwrite(), utilizada para escribir tablas de datos como archivos delimitados regulares, son opciones muy rápidas y eficientes desde el punto de vista computacional para bases de datos de gran tamaño.Las primeras 20 filas de linelist:Los comandos de R base, como dim(), que se utilizan para los dataframes, también pueden utilizarse para las tablas de datos","code":"\nlinelist <- rio::import(here(\"data\", \"linelist_cleaned.xlsx\")) %>% data.table()\ndim(linelist) #gives the number of rows and columns in the data table## [1] 5888   30"},{"path":"data-table.html","id":"the-i-argument-selecting-and-filtering-rows","chapter":"7 Data Table","heading":"7.3 El argumento i: seleccionar y filtrar filas","text":"Recordando la estructura **DT*[, j, ], podemos filtrar filas utilizando números de fila o expresiones lógicas. El argumento es el primero; por tanto, se puede utilizar la sintaxis DT[] o DT[,]**.El primer ejemplo muestra las 5 primeras filas de la tabla de datos, el segundo ejemplo los casos de 18 años o más, y el tercer ejemplo los casos de 18 años o más pero diagnosticados en el Central Hospital:El uso de .N en el argumento representa el número total de filas en la tabla de datos. Esto se puede utilizar para subconjuntar los números de las filas:","code":"\nlinelist[1:5] #returns the 1st to 5th row\nlinelist[age >= 18] #subsets cases are equal to or over 18 years\nlinelist[age >= 18 & hospital != \"Central Hospital\"] #subsets cases equal to or over 18 years old but not diagnosed at the Central Hospital\nlinelist[.N] #returns the last row\nlinelist[15:.N] #returns the 15th to the last row"},{"path":"data-table.html","id":"uso-de-funciones-de-ayuda-para-el-filtrado","chapter":"7 Data Table","heading":"Uso de funciones de ayuda para el filtrado","text":"Data table utiliza funciones de ayuda que facilitan el subconjunto de filas. La función %like% se utiliza para coincidir con un patrón en una columna, %chin% se utiliza para coincidir con un carácter específico, y la función de ayuda %% se utiliza para coincidir con columnas numéricas dentro de un rango preestablecido.En los siguientes ejemplos:\n* filtramos las filas en las que la variable hospital contiene “Hospital”\n* filtramos las filas en las que el resultado es “Recover” o “Death”\n* filtramos las filas en el rango de edad 40-60","code":"\nlinelist[hospital %like% \"Hospital\"] #filter rows where the hospital variable contains “Hospital”\nlinelist[outcome %chin% c(\"Recover\", \"Death\")] #filter rows where the outcome is “Recover” or “Death”\nlinelist[age %between% c(40, 60)] #filter rows in the age range 40-60\n\n#%between% must take a vector of length 2, whereas %chin% can take vectors of length >= 1"},{"path":"data-table.html","id":"the-j-argument-selecting-and-computing-on-columns","chapter":"7 Data Table","heading":"7.4 El argumento j: seleccionar y calcular en columnas","text":"Utilizando la estructura DT[, j, ], podemos seleccionar columnas utilizando números o nombres. El argumento j es el segundo; por lo tanto, se utiliza la sintaxis DT[, j]. Para facilitar los cálculos sobre el argumento j, la columna se envuelve utilizando list() o .().","code":""},{"path":"data-table.html","id":"selección-de-columnas","chapter":"7 Data Table","heading":"Selección de columnas","text":"El primer ejemplo recupera la primera, tercera y quinta columnas de la tabla de datos, el segundo ejemplo selecciona todas las columnas excepto las de altura, peso y sexo. El tercer ejemplo utiliza la envoltura .() para seleccionar las columnas case_id y outcome.","code":"\nlinelist[ , c(1,3,5)]\nlinelist[ , -c(\"gender\", \"age\", \"wt_kg\", \"ht_cm\")]\nlinelist[ , list(case_id, outcome)] #linelist[ , .(case_id, outcome)] works just as well"},{"path":"data-table.html","id":"cálculo-en-columnas","chapter":"7 Data Table","heading":"Cálculo en columnas","text":"Combinando los argumentos y j es posible filtrar filas y calcular en sus columnas. El uso de .N en el argumento j también representa el número total de filas en la tabla de datos y puede ser útil para devolver el número de filas después del filtrado de filas.En los siguientes ejemplos:\n* Contar el número de casos que permanecieron más de 7 días en el hospital\n* Calcular la edad media de los casos que murieron en el hospital militar\n* Calcular la desviación estándar, la mediana, la edad media de los casos que se recuperaron en el central hospitalRecuerda que el uso de .() en el argumento j facilita el cálculo, devuelve una tabla de datos y permite nombrar las columnas.","code":"\nlinelist[days_onset_hosp > 7 , .N]## [1] 189\nlinelist[hospital %like% \"Military\" & outcome %chin% \"Death\", .(mean(age, na.rm = T))] #na.rm = T removes N/A values##         V1\n## 1: 15.9084\nlinelist[hospital == \"Central Hospital\" & outcome == \"Recover\", \n                 .(mean_age = mean(age, na.rm = T),\n                   median_age = median(age, na.rm = T),\n                   sd_age = sd(age, na.rm = T))] #this syntax does not use the helper functions but works just as well##    mean_age median_age   sd_age\n## 1: 16.85185         14 12.93857"},{"path":"data-table.html","id":"the-by-argument-computing-by-groups","chapter":"7 Data Table","heading":"7.5 El argumento by: cálculo por grupos","text":"El argumento es el tercer argumento de la estructura DT[, j, ]. El argumento acepta tanto un vector de caracteres como la sintaxis list() o .(). El uso de la sintaxis .() en el argumento permite renombrar las columnas sobre la marcha.En los siguientes ejemplos:\n* agrupamos el número de casos por hospital\n* en los casos de 18 años o más, calculamos la media de altura y peso de los casos según el sexo y si se recuperaron o murieron\n* en los ingresos que duraron más de 7 días, contamos el número de casos según el mes en que ingresaron y el hospital en el que lo hicieronData.table también permite encadenar expresiones de la siguiente manera:En estos ejemplos estamos siguiendo la suposición de que una fila en la tabla de datos es igual un nuevo caso, y por lo tanto podemos utilizar el .N para representar el número de filas en la tabla de datos. Otra función útil para representar el número de casos únicos es uniqueN(), que devuelve el número de valores únicos en una entrada dada. Esto se ilustra aquí:La respuesta es 3, ya que los valores únicos de la columna de género son m, f y N/. Compárelo con la función R base unique(), que devuelve todos los valores únicos en una entrada dada:Para hallar el número de casos únicos en un mes determinado escribiríamos lo siguiente:","code":"\nlinelist[, .N, .(hospital)] #the number of cases by hospital##                                hospital    N\n## 1:                                Other  885\n## 2:                              Missing 1469\n## 3: St. Mark's Maternity Hospital (SMMH)  422\n## 4:                        Port Hospital 1762\n## 5:                    Military Hospital  896\n## 6:                     Central Hospital  454\nlinelist[age > 18, .(mean_wt = mean(wt_kg, na.rm = T),\n                             mean_ht = mean(ht_cm, na.rm = T)), .(gender, outcome)] #NAs represent the categories where the data is missing##    gender outcome  mean_wt  mean_ht\n## 1:      m Recover 71.90227 178.1977\n## 2:      f   Death 63.27273 159.9448\n## 3:      m   Death 71.61770 175.4726\n## 4:      f    <NA> 64.49375 162.7875\n## 5:      m    <NA> 72.65505 176.9686\n## 6:      f Recover 62.86498 159.2996\n## 7:   <NA> Recover 67.21429 175.2143\n## 8:   <NA>   Death 69.16667 170.7917\n## 9:   <NA>    <NA> 70.25000 175.5000\nlinelist[days_onset_hosp > 7, .N, .(month = month(date_hospitalisation), hospital)]##     month                             hospital  N\n##  1:     5                    Military Hospital  3\n##  2:     6                        Port Hospital  4\n##  3:     7                        Port Hospital  8\n##  4:     8 St. Mark's Maternity Hospital (SMMH)  5\n##  5:     8                    Military Hospital  9\n##  6:     8                                Other 10\n##  7:     8                        Port Hospital 10\n##  8:     9                        Port Hospital 28\n##  9:     9                              Missing 27\n## 10:     9                     Central Hospital 10\n## 11:     9 St. Mark's Maternity Hospital (SMMH)  6\n## 12:    10                              Missing  2\n## 13:    10                    Military Hospital  3\n## 14:     3                        Port Hospital  1\n## 15:     4                    Military Hospital  1\n## 16:     5                                Other  2\n## 17:     5                     Central Hospital  1\n## 18:     5                              Missing  1\n## 19:     6                              Missing  7\n## 20:     6 St. Mark's Maternity Hospital (SMMH)  2\n## 21:     6                    Military Hospital  1\n## 22:     7                    Military Hospital  3\n## 23:     7                                Other  1\n## 24:     7                              Missing  2\n## 25:     7 St. Mark's Maternity Hospital (SMMH)  1\n## 26:     8                     Central Hospital  2\n## 27:     8                              Missing  6\n## 28:     9                                Other  9\n## 29:     9                    Military Hospital 11\n## 30:    10                        Port Hospital  3\n## 31:    10                                Other  4\n## 32:    10 St. Mark's Maternity Hospital (SMMH)  1\n## 33:    10                     Central Hospital  1\n## 34:    11                              Missing  2\n## 35:    11                        Port Hospital  1\n## 36:    12                        Port Hospital  1\n##     month                             hospital  N\nlinelist[, .N, .(hospital)][order(-N)][1:3] #1st selects all cases by hospital, 2nd orders the cases in descending order, 3rd subsets the 3 hospitals with the largest caseload##             hospital    N\n## 1:     Port Hospital 1762\n## 2:           Missing 1469\n## 3: Military Hospital  896\nlinelist[, .(uniqueN(gender))] #remember .() in the j argument returns a data table##    V1\n## 1:  3\nlinelist[, .(unique(gender))]##      V1\n## 1:    m\n## 2:    f\n## 3: <NA>\nlinelist[, .(uniqueN(case_id)), .(month = month(date_hospitalisation))]##     month   V1\n##  1:     5   62\n##  2:     6  100\n##  3:     7  198\n##  4:     8  509\n##  5:     9 1170\n##  6:    10 1228\n##  7:    11  813\n##  8:    12  576\n##  9:     1  434\n## 10:     2  310\n## 11:     3  290\n## 12:     4  198"},{"path":"data-table.html","id":"adding-and-updating-to-data-tables","chapter":"7 Data Table","heading":"7.6 Añadir y actualizar a las tablas de datos","text":"El operador := se utiliza para añadir o actualizar datos en una tabla de datos. La adición de columnas la tabla de datos puede hacerse de las siguientes maneras:Las agregaciones más complejas están fuera del alcance de este capítulo introductorio, pero la idea es proporcionar una alternativa popular y viable dplyr para agrupar y limpiar datos. El paquete data.table es un gran paquete que permite un código ordenado y legible.","code":"\nlinelist[, adult := age >= 18] #adds one column\nlinelist[, c(\"child\", \"wt_lbs\") := .(age < 18, wt_kg*2.204)] #to add multiple columns requires c(\"\") and list() or .() syntax\nlinelist[, `:=` (bmi_in_range = (bmi > 16 & bmi < 40),\n                         no_infector_source_data = is.na(infector) | is.na(source))] #this method uses := as a functional operator `:=`\nlinelist[, adult := NULL] #deletes the column"},{"path":"data-table.html","id":"resources-36","chapter":"7 Data Table","heading":"7.7 Recursos","text":"continuación, algunos recursos útiles para obtener más información:\n* https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html\n* https://github.com/Rdatatable/data.table\n* https://s3.amazonaws.com/assets.datacamp.com/img/blog/data+table+cheat+sheet.pdf\n* https://www.machinelearningplus.com/data-manipulation/datatable--r-complete-guide/\n* https://www.datacamp.com/community/tutorials/data-table-r-tutorialPuedes realizar cualquier función de resumen sobre datos agrupados; consulta la hoja de trucos aquí para obtener más información:","code":""}]
