[{"path":"index.html","id":"section","chapter":"","heading":"","text":"","code":""},{"path":"index.html","id":"r-para-epidemiología-aplicada-y-salud-pública","chapter":"","heading":"R para epidemiología aplicada y salud pública","text":"ADVERTENCIA: Esta traducción está en proceso de elaboración. La primera fase de pre-traducción se ha realizado con DeepL.com. esa traducción automática se le hicieron algunas correcciones globales. Los capítulos en cuyo título aparece la palabra Borrador contienen esa información y se han ccorregido todavía. Los capítulos que aparecen en español ya están corregidos, aunque podría haber todavía alguna errata. Los capítulos cuyo título está en inglés, están pendientes todavía. Este manual pretende:Servir como breve guía de referencia para escribir código en RProporcionar ejemplos detallados que aborden problemas epidemiológicos.Ayudar profesionales de la epidemiología en su transición RSer accesible en entornos con baja conectividad Internet través de una versión sin conexión\nIdiomas: Inglés, Vietnamita (Tiếng Việt)\n \nEscrito y traducido por profesionales de la epidemiología, para profesionales de la epidemiologíaSomos epis de campo de todo el mundo, escribiendo en nuestro tiempo libre para ofrecer este recurso la comunidad. Tu apoyo y comentarios son muy bienvenidos:Cuestionario onlineEnvía un email epiRhandbook@gmail.com o un tweet @epiRhandbookEnvía problemas nuestro Repositorio Github","code":""},{"path":"index.html","id":"cómo-utilizar-este-manual","chapter":"","heading":"Cómo utilizar este manual","text":"Navega por las páginas del índice o utiliza el cuadro de búsquedaClica en los iconos “Copy” para copiar el códigoPuedes seguir paso paso las lecciones utilizando nuestros [datos de ejemplo][Download handbook data]Consulta la sección “Recursos” de cada página para obtener más materialVersión sin conexiónConsulta las instrucciones en la página de Descargar el Manual y los datos.","code":""},{"path":"index.html","id":"agradecimientos","chapter":"","heading":"Agradecimientos","text":"Este manual ha sido elaborado mediante la colaboración de profesionales de la epidemiología de todo el mundo, basándonos en nuestra experiencia en organismos sanitarios locales, estatales, provinciales y nacionales, la Organización Mundial de la Salud (OMS), Médicos Sin Fronteras (MSF), sistemas hospitalarios e instituciones académicas.Este manual es un producto aprobado por ninguna organización específica. Aunque nos esforzamos por ser precisos, ofrecemos ninguna garantía sobre el contenido de este libro.","code":""},{"path":"index.html","id":"colaboradores","chapter":"","heading":"Colaboradores","text":"Redactor jefe: Neale BatraEquipo central del proyecto: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAutores: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinRevisores: Pat Keating, Annick Lenglet, Margot Charette, Danielly Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Wayne Enanoria, Manual Albela Miranda, Molly Mantus, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaEquipo de traducción al español: Luis Hernando Aguilar Ramirez, Xavier Buenaño G, Ignacio Castro Aguirre, Juan Carlos Fernández-Merino, Xaviera Molina Avendaño, Juan Francisco Monteagudo, Ximena Tolosa.Illustraciones: Calder Fong","code":""},{"path":"index.html","id":"financiación-y-apoyo","chapter":"","heading":"Financiación y apoyo","text":"El manual recibió apoyo financiaciero de TEPHINET, la red mundial de Programas de Formación en Epidemiología de Campo (FETP) través de una subvención para el desarrollo de capacidades de emergencia COVID-19.La Red de Antiguos Alumnos de (EAN) proporcionó apoyo administrativo, con un agradecimiento especial Annika Wendland. EPIET es el Programa Europeo de Formación en Epidemiología de Intervención.Un agradecimiento especial Médicos Sin Fronteras (MSF) Centro Operativo de Ámsterdam (OCA) por su apoyo durante la elaboración de este manual.Esta publicación fue respaldada por el Acuerdo de Cooperación número NU2GGH001873, financiado por los Centros para el Control y la Prevención de Enfermedades través de TEPHINET, un programa de Task Force Global Health. Su contenido es responsabilidad exclusiva de los autores y representa necesariamente las opiniones oficiales de los Centros para el Control y la Prevención de Enfermedades, el Departamento de Salud y Servicios Humanos, Task Force Global Health, Inc. o TEPHINET.","code":""},{"path":"index.html","id":"inspiración","chapter":"","heading":"Inspiración","text":"Hay multitud de tutoriales y viñetas que aportaron conocimientos para el desarrollo del contenido del manual y se acreditan en sus respectivas páginas.De manera más general, las siguientes fuentes han servido de inspiración para este manual:\nEl proyecto “R4Epis” (una colaboración entre MSF y RECON)R Epidemics Consortium (RECON)El libro R Data Science (R4DS)bookdown: Creación de libros y documentos técnicos con R MarkdownNetlify alberga este sitio web","code":""},{"path":"index.html","id":"condiciones-de-uso-y-contribución","chapter":"","heading":"Condiciones de uso y contribución","text":"","code":""},{"path":"index.html","id":"licencia","chapter":"","heading":"Licencia","text":"Esta obra está bajo una Licencia Internacional Creative Commons Attribution-NonCommercial-ShareAlike 4.0.Los cursos académicos y los programas de formación en epidemiología pueden utilizar este manual con sus estudiantes. Si tienes preguntas sobre el uso que se le va dar, envía un correo electrónico epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"cita-sugerida","chapter":"","heading":"Cita sugerida","text":"Batra, Neale, et al. Manual de R para Epidemiología. 2021. ","code":""},{"path":"index.html","id":"contribución","chapter":"","heading":"Contribución","text":"Si quieres hacer una contribución de contenido, por favor, ponte en contacto con nosotros primero través de Github o por correo electrónico. Estamos implementando un calendario de actualizaciones y estamos creando una guía para colaboradores.Ten en cuenta que el proyecto epiRhandbook se publica con un Código de Conducta del Colaborador . Al contribuir este proyecto, te comprometes respetar sus términos.","code":""},{"path":"working-with-dates.html","id":"working-with-dates","chapter":"1 Borrador. Trabajando con Fechas","heading":"1 Borrador. Trabajando con Fechas","text":"ADVERTENCIA: Esta traducción es sólo un borrador de la traducción al español. Este documento tal cual está ha sido generado automáticamente con DeepL.com y se han hecho algunas correcciones globales. Está pendiente de una revisión completa. Trabajar con fechas en R requiere más atención que trabajar con otros tipos de objetos. continuación, ofrecemos algunas herramientas y ejemplos para hacer este proceso menos doloroso. Por suerte, las fechas pueden manejarse fácilmente con la práctica y con un conjunto de paquetes útiles como lubridate.Al importar los datos en bruto, R suele interpretar las fechas como objetos de carácter, lo que significa que pueden utilizarse para operaciones generales con fechas, como la creación de series temporales y el cálculo de intervalos de tiempo. Para hacer las cosas más difíciles, hay muchas maneras de formatear una fecha y debe ayudar R saber qué parte de una fecha representa qué (mes, día, hora, etc.).Las fechas en R son su propio tipo de objeto - el tipo Date. Hay que tener en cuenta que también hay un tipo que almacena objetos con fecha y hora. Los objetos fecha-hora se denominan formalmente tipos POSIXt, POSIXct, o POSIXlt (la diferencia es importante). Estos objetos se denominan informalmente tipos datetime.Es importante hacer que R reconozca cuando una columna contiene fechas.Las fechas son un tipo de objeto y pueden ser difíciles de trabajar.Aquí presentamos varias formas de convertir columnas de fecha al tipo Date.","code":""},{"path":"working-with-dates.html","id":"preparation","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.1 Preparación","text":"","code":""},{"path":"working-with-dates.html","id":"cargar-paquetes","chapter":"1 Borrador. Trabajando con Fechas","heading":"Cargar paquetes","text":"Este trozo de código muestra la carga de paquetes necesaria para esta página. En este manual destacamos p_load() de pacman, que instala el paquete si es necesario y lo carga para su uso. También puede cargar los paquetes instalados con library() de R base. Consulta la página sobre los fundamentos de R para obtener más información sobre los paquetes de R.","code":"\n# Checks if package is installed, installs if necessary, and loads package for current session\n\npacman::p_load(\n  lubridate,  # general package for handling and converting dates  \n  linelist,   # has function to \"guess\" messy dates\n  aweek,      # another option for converting dates to weeks, and weeks to dates\n  zoo,        # additional date/time functions\n  tidyverse,  # data management and visualization  \n  rio)        # data import/export"},{"path":"working-with-dates.html","id":"importar-datos","chapter":"1 Borrador. Trabajando con Fechas","heading":"Importar datos","text":"Importamos los datos de casos de una epidemia de ébola simulada. Si desea descargar los datos para seguirlos paso paso, consulta las instrucciones en la página de descarga de manuales y datos. Asumimos que el archivo está en el directorio de trabajo, por lo que se especifican subcarpetas en esta ruta de archivo.","code":"\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"working-with-dates.html","id":"current-date","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.2 Fecha actual","text":"Puedes obtener la fecha actual del “sistema” o la fecha-hora del sistema de tu ordenador haciendo lo siguiente con R base.Con el paquete lubridate también se pueden devolver con today() y now(), respectivamente. date() devuelve la fecha y la hora actuales con los nombres del día de la semana y del mes.","code":"\n# get the system date - this is a DATE class\nSys.Date()## [1] \"2021-12-03\"\n# get the system time - this is a DATETIME class\nSys.time()## [1] \"2021-12-03 14:20:01 CET\""},{"path":"working-with-dates.html","id":"convert-to-date","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.3 Convertir en fecha","text":"Después de importar unos datos R, los valores de las columnas de fecha pueden tener el aspecto de “1989/12/30”, “05/06/2014” o “13 Ene 2020”. En estos casos, es probable que R siga tratando estos valores como valores de carácter. Hay que decirle R que estos valores son fechas… y cuál es el formato de la fecha (qué parte es Día, cuál es Mes, cuál es Año, etc).Una vez dicho esto, R convierte estos valores al tipo Date. En segundo plano, R almacenará las fechas como números (el número de días desde su fecha “origen” 1 Ene 1970). interactuarás con el número de la fecha menudo, pero esto permite R tratar las fechas como variables continuas y permitir operaciones especiales como el cálculo de la distancia entre las fechas.Por defecto, los valores del tipo Date en R se muestran como AAAA-MM-DD. Más adelante en esta sección discutiremos cómo cambiar la visualización de los valores de fecha.continuación presentamos dos enfoques para convertir una columna de valores de carácter al tipo Date.CONSEJO:: Puedes comprobar el tipo actual de una columna con la función class()de R base, como class(linelist$date_onset).","code":""},{"path":"working-with-dates.html","id":"r-base","chapter":"1 Borrador. Trabajando con Fechas","heading":"R base","text":".Date() es la función estándar de R base para convertir un objeto o una columna en el tipo Date (nótese la “D” en mayúscula).El uso de .Date() requiere que:Se *especifica el formato existente de la fecha de carácter bruto o la fecha de origen si se suministran las fechas como números (véase la sección sobre las fechas de Excel)Si se utiliza en una columna de caracteres, todos los valores de fecha deben tener el mismo formato exacto (si es el caso, pruebe con guess_dates() del paquete linelist)En primer lugar, comprueba el tipo de su columna con class() de R base . Si estás seguro o estás confundido sobre el tipo de datos (por ejemplo, ve “POSIXct”, etc.) puede ser más fácil convertir primero la columna al tipo Character con .character(), y luego convertirla al tipo Date.En segundo lugar, dentro de la función .Date(), utiliza el argumento format = para indicar R el formato actual de los componentes de la fecha con caracteres - qué caracteres se refieren al mes, al día y al año, y cómo están separados. Si sus valores ya están en uno de los formatos de fecha estándar de R (“AAAA-MM-DD” o “AAAA/MM/DD”) el argumento format = es necesario.Para usar format =, proporcione una cadena de caracteres (entre comillas) que represente el formato actual de la fecha utilizando las abreviaturas especiales “strptime” que aparecen continuación. Por ejemplo, si sus fechas de caracteres están actualmente en el formato “DD/MM/AAAA”, como “24/04/1968”, entonces usaría format = \"%d/%m/%Y\" para convertir los valores en fechas. Es necesario poner el formato entre comillas. ¡Y olvides las barras o guiones!.La mayoría de las abreviaturas de strptime se enumeran continuación. Puedes ver la lista completa ejecutando ?strptime.%d = Número del día del mes (5, 17, 28, etc.)\n%j = Número del día del año (día juliano 001-366)\n%= Día de la semana abreviado (lunes, martes, miércoles, etc.)\n%= Día de la semana completo (lunes, martes, etc.) %w = Número del día de la semana (0-6, el domingo es 0)\n%u = Número del día de la semana (1-7, el lunes es 1)\n%W = Número de la semana (00-53, el lunes es el comienzo de la semana)\n%U = Número de la semana (01-53, el domingo es el comienzo de la semana)\n%m = Número del mes (p. ej. 01, 02, 03, 04)\n%b = Mes abreviado (enero, febrero, etc.)\n%B = Mes completo (enero, febrero, etc.)\n%y = Año de 2 dígitos (p. ej. 89)\n%Y = Año de 4 dígitos (p. ej. 1989)\n%h = Horas (reloj de 24 horas)\n%m = Minutos\n%s = Segundos\n%z = Desplazamiento respecto GMT\n%Z = Huso horario (carácter)CONSEJO: El argumento format = de .Date() le dice R el formato que quiere que tengan las fechas, sino cómo identificar las partes de la fecha tal y como son antes de ejecutar el comando.CONSEJO: Asegúrate que en el argumento format = se utiliza el mismo separador de partes de fechas (por ejemplo, /, -, o espacio) que está en tus fechas.Una vez que los valores están en el tipo Fecha, R los mostrará por defecto en el formato estándar, que es AAAA-MM-DD.","code":"\n# Convert to class date\nlinelist <- linelist %>% \n  mutate(date_onset = as.Date(date_of_onset, format = \"%d/%m/%Y\"))"},{"path":"working-with-dates.html","id":"lubridate","chapter":"1 Borrador. Trabajando con Fechas","heading":"lubridate","text":"La conversión de objetos de carácter fechas puede facilitarse utilizando el paquete lubridate. Se trata de un paquete tidyverse diseñado para hacer que el trabajo con fechas y horas sea más sencillo y consistente que en R base. Por estas razones, lubridate se considera menudo el paquete estándar de oro para las fechas y la hora, y se recomienda siempre que se trabaje con ellas.El paquete lubridate proporciona varias funciones de ayuda diferentes diseñadas para convertir objetos de caracteres en fechas de una manera intuitiva y más indulgente que especificando el formato en .Date(). Estas funciones son específicas para el formato de fecha aproximado, pero permiten una variedad de separadores, y sinónimos para las fechas (por ejemplo, 01 vs Jan vs Enero) - se denominan según las abreviaturas de los formatos de fecha.La flexibilidad de la función ymd() convierte de forma flexible los valores de fecha suministrados como año, luego mes y luego día.La función mdy() convierte de forma flexible los valores de fecha suministrados como mes, luego día y luego año.La función dmy() convierte de forma flexible los valores de fecha suministrados como día, luego mes y luego año.Si se utiliza la canalización, la conversión de una columna de caracteres fechas con lubridate podría tener este aspecto:Una vez completado, puedes ejecutar class() para verificar el tipo de la columnaUna vez que los valores están en el tipo Fecha, R los mostrará por defecto en el formato estándar, que es AAAA-MM-DD.Ten en cuenta que las funciones anteriores funcionan mejor con años de 4 dígitos. Los años de 2 dígitos pueden producir resultados inesperados, ya que lubridate intenta adivinar el siglo.Para convertir un año de 2 dígitos en un año de 4 dígitos (todos en el mismo siglo) puedes convertirlo tipo carácter y luego combinar los dígitos existentes con un prefijo usando str_glue() del paquete stringr. Ver Caracteres y cadenas. continuación, convierte fecha.","code":"\n# install/load lubridate \npacman::p_load(lubridate)\n# read date in year-month-day format\nymd(\"2020-10-11\")## [1] \"2020-10-11\"\nymd(\"20201011\")## [1] \"2020-10-11\"\n# read date in month-day-year format\nmdy(\"10/11/2020\")## [1] \"2020-10-11\"\nmdy(\"Oct 11 20\")## [1] \"2020-10-11\"\n# read date in day-month-year format\ndmy(\"11 10 2020\")## [1] \"2020-10-11\"\ndmy(\"11 October 2020\")## [1] \"2020-10-11\"\nlinelist <- linelist %>%\n  mutate(date_onset = lubridate::dmy(date_onset))\n# Check the class of the column\nclass(linelist$date_onset)  \ntwo_digit_years <- c(\"15\", \"15\", \"16\", \"17\")\nstr_glue(\"20{two_digit_years}\")## 2015\n## 2015\n## 2016\n## 2017"},{"path":"working-with-dates.html","id":"combinar-columnas","chapter":"1 Borrador. Trabajando con Fechas","heading":"Combinar columnas","text":"Puedes utilizar las funciones de lubridate make_date() y make_datetime() para combinar varias columnas numéricas en una columna de fecha. Por ejemplo, si tiene columnas numéricas onset_day, onset_month y onset_year en el dataframe linelist:","code":"\nlinelist <- linelist %>% \n  mutate(onset_date = make_date(year = onset_year, month = onset_month, day = onset_day))"},{"path":"working-with-dates.html","id":"excel-dates","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.4 Fechas en Excel","text":"En el fondo, la mayoría de los programas informáticos almacenan las fechas como números. R almacena las fechas desde un origen del 1 de enero de 1970. Así, si ejecutas .numeric(.Date(\"1970-01¬¬-01)) obtendrás 0.Microsoft Excel almacena las fechas con un origen dependiendo del sistema operativo, del 30 de diciembre de 1899 (Windows) o del 1 de enero de 1904 (Mac). Consulta esta guía de Microsoft para obtener más información.Las fechas de Excel suelen importarse R como estos valores numéricos en lugar de como caracteres. Si los datos que importado de Excel muestran las fechas como números o caracteres como “41369”… utiliza .Date() (o la función as_date() de lubridate) para convertirlas, pero en lugar de suministrar un “formato” como el anterior, suministre la fecha de origen de Excel al argumento origin = .Esto funcionará si la fecha de Excel se almacena en R como de tipo carácter, ¡así que asegúrate de que el número es de tipo numérico!.NOTA: Debes proporcionar la fecha de origen en el formato de fecha por defecto de R (“AAAA-MM-DD”).","code":"\n# An example of providing the Excel 'origin date' when converting Excel number dates\ndata_cleaned <- data %>% \n  mutate(date_onset = as.numeric(date_onset)) %>%   # ensure class is numeric\n  mutate(date_onset = as.Date(date_onset, origin = \"1899-12-30\")) # convert to date using Excel origin"},{"path":"working-with-dates.html","id":"messy-dates","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.5 Fechas desordenadas","text":"La función guess_dates() del paquete linelist intenta leer una columna de fecha “desordenada” que contiene fechas en muchos formatos diferentes y convertir las fechas un formato estándar. Puedes leer más en línea sobre guess_dates(). Si guess_dates() aún está disponible en CRAN para R 4.0.2, intenta instalarlo mediante pacman::p_load_gh(\"reconhub/linelist\").Por ejemplo guess_dates vería un vector de las siguientes fechas de caracteres “03 Ene 2018”, “07/03/1982”, y “08/20/85” y las convertiría al tipo Date como 2018-01-03, 1982-03-07, y 1985-08-20.Algunos argumentos opcionales para guess_dates() que puede incluir son\n* error_tolerance - Proporción de entradas que pueden ser identificadas como fechas tolerar (por defecto 0,1 o 10%)\n* last_date - la última fecha válida (por defecto, la fecha actual)\n* first_date - la primera fecha válida. Por defecto, cincuenta años antes de last_date.","code":"\nlinelist::guess_dates(c(\"03 Jan 2018\",\n                        \"07/03/1982\",\n                        \"08/20/85\"))## [1] \"2018-01-03\" \"1982-03-07\" \"1985-08-20\"# An example using guess_dates on the column dater_onset\nlinelist <- linelist %>%                 # the dataset is called linelist\n  mutate(\n    date_onset = linelist::guess_dates(  # the guess_dates() from package \"linelist\"\n      date_onset,\n      error_tolerance = 0.1,\n      first_date = \"2016-01-01\"\n    )"},{"path":"working-with-dates.html","id":"working-with-date-time-class","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.6 Trabajar con el tipo fecha-hora","text":"Como se mencionó anteriormente, R también soporta un tipo datetime - una columna que contiene información de fecha y hora. Al igual que con el tipo Date, menudo es necesario convertirlas de objetos character objetos datetime.","code":""},{"path":"working-with-dates.html","id":"convertir-fechas-con-horas","chapter":"1 Borrador. Trabajando con Fechas","heading":"Convertir fechas con horas","text":"Un objeto datetime estándar se formatea con la fecha en primer lugar, seguida de un componente de tiempo - por ejemplo, 01 Ene 2020, 16:30. Al igual que con las fechas, hay muchas maneras de formatearlas, y hay numerosos niveles de precisión (horas, minutos, segundos) que se pueden suministrar.Por suerte, también existen funciones de ayuda de lubridate para ayudar convertir estas cadenas en objetos datetime. Estas funciones son extensiones de las funciones de ayuda la fecha, con _h (sólo se suministran las horas), _hm (se suministran las horas y los minutos), o _hms (se suministran las horas, los minutos y los segundos) añadidas al final (por ejemplo, dmy_hms()). Se pueden utilizar como se indica:Convertir datetime con sólo horas objeto datetimeConvertir datetime con horas y minutos objeto datetimeConvertir datetime con horas, minutos y segundos objeto datetimePuedes indicar la zona horaria, pero se ignora. Consulta la sección más adelante en esta página sobre las zonas horarias.Cuando se trabaja con un dataframe, las columnas de fecha y hora pueden combinarse para crear una columna de fecha y hora utilizando str_glue()del paquete stringr y una función apropiada de lubridate . Consulta la página sobre Caracteres y cadenas para obtener detalles sobre stringr.En este ejemplo, el dataframe linelist tiene una columna con formato “horas:minutos”. Para convertirla en una fecha, hay que seguir algunos pasos:Cree una columna de tiempo de admisión “limpia” con los valores faltantes rellenados con la mediana de la columna. Hacemos esto porque lubridate opera con valores faltantes. Combínela con la columna date_hospitalisation y utiliza la función ymd_hm() para convertirla.","code":"\nymd_h(\"2020-01-01 16hrs\")## [1] \"2020-01-01 16:00:00 UTC\"\nymd_h(\"2020-01-01 4PM\")## [1] \"2020-01-01 04:00:00 UTC\"\ndmy_hm(\"01 January 2020 16:20\")## [1] \"2020-01-01 16:20:00 UTC\"\nmdy_hms(\"01 January 2020, 16:20:40\")## [1] \"2020-01-20 16:20:40 UTC\"\nmdy_hms(\"01 January 2020, 16:20:40 PST\")## [1] \"2020-01-20 16:20:40 UTC\"# packages\npacman::p_load(tidyverse, lubridate, stringr)\n\n# time_admission is a column in hours:minutes\nlinelist <- linelist %>%\n  \n  # when time of admission is not given, assign the median admission time\n  mutate(\n    time_admission_clean = ifelse(\n      is.na(time_admission),         # if time is missing\n      median(time_admission),        # assign the median\n      time_admission                 # if not missing keep as is\n  ) %>%\n  \n    # use str_glue() to combine date and time columns to create one character column\n    # and then use ymd_hm() to convert it to datetime\n  mutate(\n    date_time_of_admission = str_glue(\"{date_hospitalisation} {time_admission_clean}\") %>% \n      ymd_hm()\n  )"},{"path":"working-with-dates.html","id":"convertir-sólo-horas","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.6.1 Convertir sólo horas","text":"Si tus datos contienen sólo un carácter de tiempo (horas y minutos), puedes convertirlos y manipularlos como tiempos utilizando strptime() desde R base. Por ejemplo, para obtener la diferencia entre dos de estos horas:Sin embargo, ten en cuenta que si se proporciona un valor de fecha, se asume que la fecha es hoy. Para combinar una cadena de fecha y una cadena de hora, vea cómo usar stringr en la sección anterior. Lea más sobre strptime() aquí.Para convertir números de un solo dígito dos dígitos (por ejemplo, para “rellenar” las horas o los minutos con ceros la izquierda para conseguir 2 dígitos), consulta la sección “Longitud de relleno” de la página Caracteres y cadenas.","code":"\n# raw character times\ntime1 <- \"13:45\" \ntime2 <- \"15:20\"\n\n# Times converted to a datetime class\ntime1_clean <- strptime(time1, format = \"%H:%M\")\ntime2_clean <- strptime(time2, format = \"%H:%M\")\n\n# Difference is of class \"difftime\" by default, here converted to numeric hours \nas.numeric(time2_clean - time1_clean)   # difference in hours## [1] 1.583333"},{"path":"working-with-dates.html","id":"extraer-fracciones-de-hora","chapter":"1 Borrador. Trabajando con Fechas","heading":"Extraer fracciones de hora","text":"Puedes extraer elementos de una hora con hour(), minute(), second() de lubridate.aquí un ejemplo de extracción de la hora y posterior clasificación por parte del día. Comenzamos con la columna time_admission, que es de tipo Carácter en formato “HH:MM”. En primer lugar, se utiliza strptime() como se ha descrito anteriormente para convertir los caracteres en tipo datetime. continuación, se extrae la hora con hour(), devolviendo un número del 0 al 24. Por último, se crea una columna time_period utilizando la lógica con case_when() para clasificar las filas en Mañana/Tarde/Tarde/Noche en función de su hora de entrada.Para saber más sobre case_when(), consulta la página sobre Limpieza de datos y funciones básicas.","code":"\nlinelist <- linelist %>%\n  mutate(hour_admit = hour(strptime(time_admission, format = \"%H:%M\"))) %>%\n  mutate(time_period = case_when(\n    hour_admit > 06 & hour_admit < 12 ~ \"Morning\",\n    hour_admit >= 12 & hour_admit < 17 ~ \"Afternoon\",\n    hour_admit >= 17 & hour_admit < 21 ~ \"Evening\",\n    hour_admit >=21 | hour_admit <= 6 ~ \"Night\"))"},{"path":"working-with-dates.html","id":"working-with-dates-1","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.7 Trabajar con fechas","text":"lubridate también puede utilizarse para otras funciones, como la extracción de aspectos de una fecha/hora, realización de cálculos aritméticos de fechas o cálculo de intervalos de fechasAquí definimos una fecha que se utilizará para los ejemplos:","code":"\n# create object of class Date\nexample_date <- ymd(\"2020-03-01\")"},{"path":"working-with-dates.html","id":"extraer-los-componentes-de-la-fecha","chapter":"1 Borrador. Trabajando con Fechas","heading":"Extraer los componentes de la fecha","text":"Puedes extraer aspectos comunes como el mes, el día, el día de la semana:También puede extraer componentes de tiempo de un objeto o columna datetime. Esto puede ser útil si quiere ver la distribución de los tiempos de admisión.Hay varias opciones para recuperar las semanas. Consulta la sección sobre semanas epidemiológicas más abajo.Ten en cuenta que si desea mostrar una fecha de una forma determinada (por ejemplo, “enero de 2020” o “jueves 20 de marzo” o “semana 20 de 1977”) puede hacerlo de forma más flexible, tal y como se describe en la sección sobre Visualización de fechas.","code":"\nmonth(example_date)  # month number## [1] 3\nday(example_date)    # day (number) of the month## [1] 1\nwday(example_date)   # day number of the week (1-7)## [1] 1\nexample_datetime <- ymd_hm(\"2020-03-01 14:45\")\n\nhour(example_datetime)     # extract hour\nminute(example_datetime)   # extract minute\nsecond(example_datetime)   # extract second"},{"path":"working-with-dates.html","id":"fecha-matemática","chapter":"1 Borrador. Trabajando con Fechas","heading":"Fecha matemática","text":"Puedes añadir ciertos números de días o semanas utilizando su respectiva función de lubridate.","code":"\n# add 3 days to this date\nexample_date + days(3)## [1] \"2020-03-04\"\n# add 7 weeks and subtract two days from this date\nexample_date + weeks(7) - days(2)## [1] \"2020-04-17\""},{"path":"working-with-dates.html","id":"intervalos-de-fechas","chapter":"1 Borrador. Trabajando con Fechas","heading":"Intervalos de fechas","text":"La diferencia entre las fechas se puede calcular mediante:Asegúrese de que ambas fechas son del mismo tipoUtiliza la resta para devolver la diferencia “difftime” entre las dos fechasSi es necesario, convierta el resultado en tipo numéricoa para realizar los cálculos matemáticos posterioresA continuación se calcula y muestra el intervalo entre dos fechas. Se pueden encontrar intervalos utilizando el símbolo de resta “menos” en los valores que son de tipo Fecha. Ten en cuenta, sin embargo, que el tipo del valor devuelto es “difftime”, como se muestra continuación, y debe ser convertido numérico.Para realizar operaciones posteriores sobre un “difftime”, conviértalo en numérico con .numeric().Todo esto puede unirse para trabajar con datos, por ejemplo:En un contexto de dataframe, si falta alguna de las fechas anteriores, la operación fallará para esa fila. El resultado será un NA en lugar de un valor numérico. Cuando utilices esta columna para los cálculos, asegúrate de establecer el argumento na.rm = en TRUE. Por ejemplo:","code":"\n# find the interval between this date and Feb 20 2020 \noutput <- example_date - ymd(\"2020-02-20\")\noutput    # print## Time difference of 10 days\nclass(output)## [1] \"difftime\"\npacman::p_load(lubridate, tidyverse)   # load packages\n\nlinelist <- linelist %>%\n  \n  # convert date of onset from character to date objects by specifying dmy format\n  mutate(date_onset = dmy(date_onset),\n         date_hospitalisation = dmy(date_hospitalisation)) %>%\n  \n  # filter out all cases without onset in march\n  filter(month(date_onset) == 3) %>%\n    \n  # find the difference in days between onset and hospitalisation\n  mutate(days_onset_to_hosp = date_hospitalisation - date_of_onset)\n# calculate the median number of days to hospitalisation for all cases where data are available\nmedian(linelist_delay$days_onset_to_hosp, na.rm = T)"},{"path":"working-with-dates.html","id":"date-display","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.8 Visualización de la fecha","text":"Una vez que las fechas son del tipo correcto, menudo se desea mostrarlas de forma diferente, por ejemplo para que se muestren como “lunes 05 de enero” en lugar de “2018-01-05”. También puedes querer ajustar la visualización para agrupar las filas por los elementos de fecha mostrados, por ejemplo, para agrupar por mes-año.","code":""},{"path":"working-with-dates.html","id":"format","chapter":"1 Borrador. Trabajando con Fechas","heading":"format()","text":"Ajusta la visualización de la fecha con la función format() de R base. Esta función acepta una cadena de caracteres (entre comillas) que especifica el formato de salida deseado en las abreviaturas strptime “%” (la misma sintaxis que se utiliza en .Date()). continuación se muestran las abreviaturas más comunes.Nota: el uso de format() convertirá los valores al tipo Character, por lo que generalmente se utiliza hacia el final de un análisis o sólo para fines de visualización. Puedes ver la lista completa ejecutando ?strptime.%d = Número del día del mes (5, 17, 28, etc.)\n%j = Número del día del año (día juliano 001-366)\n%= Día de la semana abreviado (lunes, martes, miércoles, etc.)\n%= Día de la semana completo (lunes, martes, etc.)\n%w = Número del día de la semana (0-6, el domingo es 0)\n%u = Número del día de la semana (1-7, el lunes es 1)\n%W = Número de la semana (00-53, el lunes es el comienzo de la semana)\n%U = Número de la semana (01-53, el domingo es el comienzo de la semana)\n%m = Número del mes (p. ej. 01, 02, 03, 04)\n%b = Mes abreviado (enero, febrero, etc.)\n%B = Mes completo (enero, febrero, etc.)\n%y = Año de 2 dígitos (p. ej. 89)\n%Y = Año de 4 dígitos (p. ej. 1989)\n%h = Horas (reloj de 24 horas)\n%m = Minutos\n%s = Segundos\n%z = Desplazamiento respecto GMT\n%Z = Huso horario (carácter)Un ejemplo de formato de la fecha de hoy:Ten en cuenta que si utiliza str_glue(), Ten en cuenta que dentro de las esperadas comillas dobles \" sólo debe utilizar comillas simples (como arriba).","code":"\n# today's date, with formatting\nformat(Sys.Date(), format = \"%d %B %Y\")## [1] \"03 diciembre 2021\"\n# easy way to get full date and time (default formatting)\ndate()## [1] \"Fri Dec  3 14:20:01 2021\"\n# formatted combined date, time, and time zone using str_glue() function\nstr_glue(\"{format(Sys.Date(), format = '%A, %B %d %Y, %z  %Z, ')}{format(Sys.time(), format = '%H:%M:%S')}\")## viernes, diciembre 03 2021, +0000  UTC, 14:20:01\n# Using format to display weeks\nformat(Sys.Date(), \"%Y Week %W\")## [1] \"2021 Week 48\""},{"path":"working-with-dates.html","id":"mes-año","chapter":"1 Borrador. Trabajando con Fechas","heading":"Mes-Año","text":"Para convertir una columna de fecha al formato mes-año, le sugerimos que utilice la función .yearmon() del paquete zoo. Esto convierte la fecha al tipo “yearmon” y mantiene el orden correcto. Por el contrario, usar format(columna, \"%Y %B\") convertirá al tipo Carácter y ordenará los valores alfabéticamente (incorrectamente).continuación, se crea una nueva columna yearmonth partir de la columna date_onset, utilizando la función .yearmon()`. La ordenación por defecto (correcta) de los valores resultantes se muestra en la tabla.Por el contrario, se puede ver cómo sólo utilizando format() se consigue el formato de visualización deseado, pero el orden correcto.Nota: si estás trabajando con ggplot() y quieres ajustar sólo cómo se muestran las fechas, puede ser suficiente proporcionar un formato strptime al argumento date_labels = en scale_x_date() - puedes utilizar \"%b %Y\" o \"%Y %b\". Consulta la página de consejos de ggplot.zoo también ofrece la función .yearqtr(), y puedes usar scale_x_yearmon() cuando uses ggplot().","code":"\n# create new column \ntest_zoo <- linelist %>% \n     mutate(yearmonth = zoo::as.yearmon(date_onset))\n\n# print table\ntable(test_zoo$yearmon)## \n## abr 2014 may 2014 jun 2014 jul 2014 ago 2014 sep 2014 oct 2014 nov 2014 dic 2014 ene 2015 feb 2015 mar 2015 abr 2015 \n##        7       64      100      226      528     1070     1112      763      562      431      306      277      186\n# create new column\ntest_format <- linelist %>% \n     mutate(yearmonth = format(date_onset, \"%b %Y\"))\n\n# print table\ntable(test_format$yearmon)## \n## abr 2014 abr 2015 ago 2014 dic 2014 ene 2015 feb 2015 jul 2014 jun 2014 mar 2015 may 2014 nov 2014 oct 2014 sep 2014 \n##        7      186      528      562      431      306      226      100      277       64      763     1112     1070"},{"path":"working-with-dates.html","id":"dates_epi_wks","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.9 Semanas epidemiológicas","text":"","code":""},{"path":"working-with-dates.html","id":"lubridate-1","chapter":"1 Borrador. Trabajando con Fechas","heading":"lubridate","text":"Consulta la página sobre Agrupar datos para ver ejemplos más extensos de agrupación de datos por fecha. continuación describimos brevemente la agrupación de datos por semanas.Generalmente recomendamos utilizar la función floor_date() de lubridate, con el argumento unit = \"week\". Esto redondea la fecha hacia abajo al “inicio” de la semana, como se define por el argumento week_start =. El inicio de la semana por defecto es el 1 (para los lunes), pero se puede especificar cualquier día de la semana como inicio (por ejemplo, el 7 para los domingos). floor_date() es versátil y se puede utilizar para redondear hacia abajo otras unidades de tiempo estableciendo unit = “second”, “minute”, “hour”, “day”, “month”, o “year”.El valor devuelto es la fecha de inicio de la semana, en tipo Date. El tipo Date es útil la hora de trazar los datos, ya que serán fácilmente reconocidos y ordenados correctamente por ggplot().Si sólo está interesado en ajustar las fechas para que se muestren por semanas en un gráfico, consulta la sección de esta página sobre Visualización de fechas. Por ejemplo, al trazar una epicurva puede formatear la visualización de la fecha proporcionando la nomenclatura strptime “%” deseada. Por ejemplo, utiliza “%Y-%W” o “%Y-%U” para devolver el año y el número de semana (dado el comienzo de la semana del lunes o del domingo, respectivamente).","code":""},{"path":"working-with-dates.html","id":"recuentos-semanales","chapter":"1 Borrador. Trabajando con Fechas","heading":"Recuentos semanales","text":"Consulta la página sobre Agrupar datos para obtener una explicación detallada de la agrupación de datos con count(), group_by(), summarise(). continuación se muestra un breve ejemplo.Crear una nueva columna “semana” con mutate(), utilizando floor_date() con unit = \"week\"Crear una nueva columna “semana” con mutate(), utilizando floor_date() con unit = \"week\"Obtener el recuento de filas (casos) por semana con count(); filtra los casos los que les falte la fechaObtener el recuento de filas (casos) por semana con count(); filtra los casos los que les falte la fechaTermin con complete() de tidyr para asegurarse de que todas las semanas aparecen en los datos - incluso las que tienen filas/casos. Por defecto, los valores de recuento para cualquier fila “nueva” son NA, pero puede hacerlos 0 con el argumento fill =, que espera una lista con nombre (abajo, n es el nombre de la columna de recuentos).Termin con complete() de tidyr para asegurarse de que todas las semanas aparecen en los datos - incluso las que tienen filas/casos. Por defecto, los valores de recuento para cualquier fila “nueva” son NA, pero puede hacerlos 0 con el argumento fill =, que espera una lista con nombre (abajo, n es el nombre de la columna de recuentos).Aquí están las primeras filas del dataframe resultante:","code":"\n# Make aggregated dataset of weekly case counts\nweekly_counts <- linelist %>% \n  drop_na(date_onset) %>%             # remove cases missing onset date\n  mutate(weekly_cases = floor_date(   # make new column, week of onset\n    date_onset,\n    unit = \"week\")) %>%            \n  count(weekly_cases) %>%           # group data by week and count rows per group (creates column 'n')\n  tidyr::complete(                  # ensure all weeks are present, even those with no cases reported\n    weekly_cases = seq.Date(          # re-define the \"weekly_cases\" column as a complete sequence,\n      from = min(weekly_cases),       # from the minimum date\n      to = max(weekly_cases),         # to the maxiumum date\n      by = \"week\"),                   # by weeks\n    fill = list(n = 0))             # fill-in NAs in the n counts column with 0"},{"path":"working-with-dates.html","id":"alternativas-a-la-epiweek","chapter":"1 Borrador. Trabajando con Fechas","heading":"Alternativas a la Epiweek","text":"Ten en cuenta que lubridate también tiene las funciones week(), epiweek(), e isoweek(), cada una de las cuales tiene fechas de inicio ligeramente diferentes y otros matices. Sin embargo, en términos generales, floor_date() debería ser todo lo que necesita. Lea los detalles de estas funciones introduciendo ?week en la consola o leyendo la documentación aquí.Puedes usar del paquete aweek para establecer semanas epidemiológicas. Puedes leer más sobre él en el sitio web de RECON. Tiene las funciones date2week() y week2date() en las que puede establecer el día de inicio de la semana con week_start = \"Monday\". Este paquete es el más fácil si se desea obtener resultados del tipo “week” (por ejemplo, “2020-W12”). Otra ventaja de aweek es que cuando date2week() se aplica una columna de fecha, la columna devuelta (formato de semana) es automáticamente del tipo Factor e incluye niveles para todas las semanas en el lapso de tiempo (esto evita el paso extra de complete() descrito anteriormente). Sin embargo, aweek tiene la funcionalidad de redondear fechas otras unidades de tiempo como meses, años, etc.Otra alternativa para las series temporales que también funciona bien para mostrar un formato de “semana” (“2020 W12”) es yearweek() del paquete tsibble, como se demuestra en la página sobre series temporales y detección de brotes.","code":""},{"path":"working-with-dates.html","id":"converting-datestime-zones","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.10 Conversión de fechas/zonas horarias","text":"Cuando los datos están presentes en diferentes husos horarios, menudo puede ser importante normalizar estos datos en un huso horario unificado. Esto puede suponer un reto adicional, ya que el componente de zona horaria de los datos debe codificarse manualmente en la mayoría de los casos.En R, cada objeto datetime tiene un componente de zona horaria. Por defecto, todos los objetos datetime llevarán la zona horaria local para el ordenador que se está utilizando - esto es generalmente específico para una ubicación en lugar de una zona horaria, ya que las zonas horarias menudo cambian en los lugares debido al horario de verano. es posible compensar con precisión las zonas horarias sin un componente de tiempo de una fecha, ya que el evento que representa una columna de fecha puede ser atribuido un tiempo específico, y por lo tanto los cambios de tiempo medidos en horas pueden ser razonablemente contabilizados.Para tratar las zonas horarias, hay una serie de funciones de ayuda en lubridate que pueden utilizarse para cambiar la zona horaria de un objeto datetime de la zona horaria local una zona horaria diferente. Las zonas horarias se establecen atribuyendo una zona horaria válida de la base de datos tz al objeto datetime. Una lista de estos se puede encontrar aquí - si la ubicación que está utilizando los datos está en esta lista, las grandes ciudades cercanas en la zona horaria están disponibles y sirven el mismo propósito.\nhttps://en.wikipedia.org/wiki/List_of_tz_database_time_zonesEsto puede parecer muy abstracto, y menudo es necesario si el usuario está trabajando través de zonas horarias.","code":"\n# assign the current time to a column\ntime_now <- Sys.time()\ntime_now## [1] \"2021-12-03 14:20:02 CET\"\n# use with_tz() to assign a new timezone to the column, while CHANGING the clock time\ntime_london_real <- with_tz(time_now, \"Europe/London\")\n\n# use force_tz() to assign a new timezone to the column, while KEEPING the clock time\ntime_london_local <- force_tz(time_now, \"Europe/London\")\n\n\n# note that as long as the computer that was used to run this code is NOT set to London time,\n# there will be a difference in the times \n# (the number of hours difference from the computers time zone to london)\ntime_london_real - time_london_local## Time difference of -1 hours"},{"path":"working-with-dates.html","id":"cálculos-de-retardo-y-de-avance","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.11 Cálculos de retardo y de avance","text":"lead() y lag() son funciones del paquete dplyr que ayudan encontrar los valores anteriores (retardados) o posteriores (principales) en un vector, normalmente un vector numérico o de fechas. Esto es útil cuando se hacen cálculos de cambio/diferencia entre unidades de tiempo.`Supongamos que se quiere calcular la diferencia de casos entre una semana actual y la anterior. Los datos se proporcionan inicialmente en recuentos semanales, como se muestra continuación.Al utilizar lag() o lead(), el orden de las filas en el dataframe es muy importante. - presta atención si tus fechas/números son ascendentes o descendentesEn primer lugar, cree una nueva columna que contenga el valor de la semana anterior (retardada).Controla el número de unidades hacia atrás/adelante con n = (debe ser un entero negativo)Controla el número de unidades hacia atrás/adelante con n = (debe ser un entero negativo)Utiliza default = para definir el valor colocado en las filas existentes (por ejemplo, la primera fila para la que hay un valor retardado). Por defecto es NA.Utiliza default = para definir el valor colocado en las filas existentes (por ejemplo, la primera fila para la que hay un valor retardado). Por defecto es NA.Utiliza order_by = TRUE si tus filas están ordenadas por su columna de referenciaUtiliza order_by = TRUE si tus filas están ordenadas por su columna de referenciaA continuación, cree una nueva columna que sea la diferencia entre las dos columnas de los casos:Puedes leer más sobre lead() y lag() en la documentación aquí o introduciendo ?lag en tu consola.","code":"\ncounts <- counts %>% \n  mutate(cases_prev_wk = lag(cases_wk, n = 1))\ncounts <- counts %>% \n  mutate(cases_prev_wk = lag(cases_wk, n = 1),\n         case_diff = cases_wk - cases_prev_wk)"},{"path":"working-with-dates.html","id":"resources-2","chapter":"1 Borrador. Trabajando con Fechas","heading":"1.12 Recursos","text":"Página de lubridate** tidyverse \nPágina de lubridate RStudio cheatsheet\nR Data Science en español sobre [fechas y horas]https://es.r4ds.hadley.nz/fechas-y-horas.html\nTutorial en línea\nFormatos de fecha]","code":""}]
