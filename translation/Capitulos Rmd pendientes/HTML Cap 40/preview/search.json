[{"path":"index.html","id":"section","chapter":"","heading":"","text":"","code":""},{"path":"index.html","id":"r-para-epidemiología-aplicada-y-salud-pública","chapter":"","heading":"R para epidemiología aplicada y salud pública","text":"Este manual pretende:Servir como breve guía de referencia para escribir código en RProporcionar ejemplos detallados que aborden problemas epidemiológicos.Ayudar profesionales de la epidemiología en su transición RSer accesible en entornos con baja conectividad Internet través de una versión sin conexión \nEscrito y traducido por profesionales de la epidemiología, para profesionales de la epidemiologíaSomos epis de campo de todo el mundo, escribiendo en nuestro tiempo libre para ofrecer este recurso la comunidad. Tu apoyo y comentarios son muy bienvenidos:Cuestioanrio onlineEnvía un email epiRhandbook@gmail.com o un tweet @epiRhandbookEnvía problemas nuestro Repositorio Github","code":""},{"path":"index.html","id":"cómo-utilizar-este-manual","chapter":"","heading":"Cómo utilizar este manual","text":"Navega por las páginas del índice o utiliza el cuadro de búsquedaClica en los iconos “Copy” para copiar el códigoPuedes seguir paso paso las lecciones utilizando nuestros [datos de ejemplo][Download handbook data]Consulta la sección “Recursos” de cada página para obtener más materialVersión sin conexiónConsulta las instrucciones en la página de Descargar el Manual y los datos.IdiomasQueremos traducir este manual otros idiomas. Si deseas ayudar, ponte en contacto con nosotros.","code":""},{"path":"index.html","id":"agradecimientos","chapter":"","heading":"Agradecimientos","text":"Este manual ha sido elaborado mediante la colaboración de profesionales de la epidemiología de todo el mundo, basándonos en nuestra experiencia en organismos sanitarios locales, estatales, provinciales y nacionales, la Organización Mundial de la Salud (OMS), Médicos Sin Fronteras (MSF), sistemas hospitalarios e instituciones académicas.Este manual es un producto aprobado por ninguna organización específica. Aunque nos esforzamos por ser precisos, ofrecemos ninguna garantía sobre el contenido de este libro.","code":""},{"path":"index.html","id":"colaboradores","chapter":"","heading":"Colaboradores","text":"Redactor jefe: Neale BatraEquipo central del proyecto: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAutores: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinRevisores: Pat Keating, Annick Lenglet, Margot Charette, Danielly Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Wayne Enanoria, Manual Albela Miranda, Molly Mantus, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaEquipo de traducción al español: Luis Hernando Aguilar Ramirez, Xavier Buenaño G, Ignacio Castro Aguirre, Juan Carlos Fernández-Merino, Xaviera Molina Avendaño, Juan Francisco Monteagudo, Ximena Tolosa.Illustraciones: Calder Fong","code":""},{"path":"index.html","id":"financiación-y-apoyo","chapter":"","heading":"Financiación y apoyo","text":"El manual recibió apoyo financiaciero de TEPHINET, la red mundial de Programas de Formación en Epidemiología de Campo (FETP) través de una subvención para el desarrollo de capacidades de emergencia COVID-19.La Red de Antiguos Alumnos de (EAN) proporcionó apoyo administrativo, con un agradecimiento especial Annika Wendland. EPIET es el Programa Europeo de Formación en Epidemiología de Intervención.Un agradecimiento especial Médicos Sin Fronteras (MSF) Centro Operativo de Ámsterdam (OCA) por su apoyo durante la elaboración de este manual.Esta publicación fue respaldada por el Acuerdo de Cooperación número NU2GGH001873, financiado por los Centros para el Control y la Prevención de Enfermedades través de TEPHINET, un programa de Task Force Global Health. Su contenido es responsabilidad exclusiva de los autores y representa necesariamente las opiniones oficiales de los Centros para el Control y la Prevención de Enfermedades, el Departamento de Salud y Servicios Humanos, Task Force Global Health, Inc. o TEPHINET.","code":""},{"path":"index.html","id":"inspiración","chapter":"","heading":"Inspiración","text":"La multitud de tutoriales y viñetas que aportaron conocimientos para el desarrollo del contenido del manual se acreditan en sus respectivas páginas.De manera más general, las siguientes fuentes han servido de inspiración para este manual:\nEl proyecto “R4Epis” (una colaboración entre MSF y RECON)R Epidemics Consortium (RECON)El libro R Data Science (R4DS)bookdown: Creación de libros y documentos técnicos con R MarkdownNetlify alberga este sitio web","code":""},{"path":"index.html","id":"condiciones-de-uso-y-contribución","chapter":"","heading":"Condiciones de uso y contribución","text":"","code":""},{"path":"index.html","id":"licencia","chapter":"","heading":"Licencia","text":"Esta obra está bajo una Licencia Internacional Creative Commons Attribution-NonCommercial-ShareAlike 4.0.Los cursos académicos y los programas de formación en epidemiología pueden utilizar este manual con sus estudiantes. Si tienes preguntas sobre el uso que se le va dar, envía un correo electrónico epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"citación","chapter":"","heading":"Citación","text":"Batra, Neale, et al. Manual de R para Epidemiología. 2021. ","code":""},{"path":"index.html","id":"contribución","chapter":"","heading":"Contribución","text":"Si quieres hacer una contribución de contenido, por favor, ponte en contacto con nosotros primero través de Github o por correo electrónico. Estamos implementando un calendario de actualizaciones y estamos creando una guía para colaboradores.Ten en cuenta que el proyecto epiRhandbook se publica con un Código de Conducta del Colaborador . Al contribuir este proyecto, te comprometes respetar sus términos.","code":""},{"path":"reports-with-r-markdown.html","id":"reports-with-r-markdown","chapter":"1 Borrador: Informes con R Markdown","heading":"1 Borrador: Informes con R Markdown","text":"ADVERTENCIA: Esta traducción es sólo un borrador de la traducción al español. Este documento tal cual está ha sido generado automáticamente con DeepL.com y se han hecho algunas correcciones globales. Está pendiente de una revisión completa.R Markdown es una herramienta ampliamente utilizada para crear resultados automatizados, reproducibles y dignos de compartir, como los informes. Puedes generar resultados estáticos o interactivos, en Word, pdf, html, powerpoint y otros formatos.Un script de R Markdown intercala el código R y el texto de tal manera que el script se convierte en tu documento de salida. Puedes crear un documento completo con formato, incluyendo texto narrativo (puede ser dinámico para cambiar en función de sus datos), tablas, figuras, viñetas/números, bibliografías, etc.Estos documentos pueden producirse para actualizarlos de forma rutinaria (por ejemplo, informes de vigilancia diarios) y/o ejecutarse sobre subconjuntos de datos (por ejemplo, informes para cada jurisdicción).Otras páginas de este manual amplían este tema:La página Organización de los informes de rutina muestra cómo rutinizar la producción de informes con carpetas autogeneradas con marca de tiempo.La página Dashboardscon R Markdown explica cómo formatear un informe de R Markdown como un cuadro de mando o tablero de control.Cabe destacar que el proyecto R4Epis ha desarrollado plantillas de scripts R Markdown para los escenarios más comunes de brotes y encuestas que se encuentran en las localizaciones de los proyectos de MSF.","code":""},{"path":"reports-with-r-markdown.html","id":"preparation-31","chapter":"1 Borrador: Informes con R Markdown","heading":"1.1 Preparación","text":"Antecedentes de R MarkdownExplicar algunos de los conceptos y paquetes involucrados:Markdown es un “lenguaje” que permite escribir un documento en texto plano, que puede ser convertido html y otros formatos. es específico de R. Los archivos escritos en Markdown tienen una extensión ‘.md’.R Markdown: es una variación de markdown que es específica de R - le permite escribir un documento usando markdown para producir texto y para incrustar código R y mostrar sus resultados. Los archivos R Markdown tienen la extensión ‘.Rmd’.rmarkdown - el paquete: Esto es usado por R para convertir el archivo .Rmd en la salida deseada. Su objetivo es convertir la sintaxis markdown (texto), por lo que también necesitamos…knitr: Este paquete de R leerá los trozos de código, los ejecutará y los “tejerá” de nuevo en el documento. Así es como se incluyen las tablas y los gráficos junto al texto.Pandoc: Por último, pandoc convierte la salida en word/pdf/powerpoint, etc. Es un software independiente de R, pero se instala automáticamente con RStudio.En resumen, el proceso que ocurre en segundo plano (¡es necesario que conozcas todos estos pasos!) consiste en alimentar el archivo .Rmd knitr, que ejecuta los trozos de código R y crea un nuevo archivo .md (markdown) que incluye el código R y su salida renderizada. El archivo .md es entonces procesado por pandoc para crear el producto final: un documento de Microsoft Word, un archivo HTML, un documento powerpoint, un pdf, etc.(fuente: https://rmarkdown.rstudio.com/authoring_quick_tour.html):InstalaciónPara crear una salida de R Markdown, necesitas tener instalado lo siguiente:El paquete rmarkdown (knitr también se instalará automáticamente)Pandoc, que debería venir instalado con RStudio. Si utilizas RStudio, puedes descargar Pandoc aquí: http://pandoc.org .Si quiere generar una salida en PDF (un poco más complicado), necesitará instalar LaTeX. Para los usuarios de R Markdown que hayan instalado LaTeX antes, recomendamos que instalen TinyTeX (https://yihui.name/tinytex/)https://yihui.name/tinytex/). Puedes utilizar los siguientes comandos:","code":"\npacman::p_load(tinytex)     # install tinytex package\ntinytex::install_tinytex()  # R command to install TinyTeX software"},{"path":"reports-with-r-markdown.html","id":"getting-started","chapter":"1 Borrador: Informes con R Markdown","heading":"1.2 Cómo empezar","text":"","code":""},{"path":"reports-with-r-markdown.html","id":"install-rmarkdown-r-package","chapter":"1 Borrador: Informes con R Markdown","heading":"1.2.1 Instalar el paquete R rmarkdown","text":"Instala el paquete R rmarkdown. En este manual destacamos p_load() de pacman, que instala el paquete si es necesario y lo carga para su uso. También puede cargar los paquetes instalados con library() de . Consulta la página sobre fundamentos de R para obtener más información sobre los paquetes de R.","code":"\npacman::p_load(rmarkdown)"},{"path":"reports-with-r-markdown.html","id":"starting-a-new-rmd-file","chapter":"1 Borrador: Informes con R Markdown","heading":"1.2.2 Iniciar un nuevo archivo Rmd","text":"En RStudio, abre un nuevo archivo R markdown, comenzando con ‘File’, luego ‘New file’ luego ‘R markdown…’.R Studio te dará algunas opciones de salida para elegir. En el ejemplo siguiente seleccionamos “HTML” porque queremos crear un documento html. El título y los nombres de los autores son importantes. Si el tipo de documento de salida que desea es uno de estos, se preocupe - puede elegir cualquiera y cambiarlo en el script más tarde.Esto abrirá un nuevo script .Rmd.","code":""},{"path":"reports-with-r-markdown.html","id":"important-to-know","chapter":"1 Borrador: Informes con R Markdown","heading":"1.2.3 Es importante saber","text":"El directorio de trabajoEl directorio de trabajo de un archivo markdown es el lugar donde se guarda el propio archivo Rmd. Por ejemplo, si el proyecto R está dentro de ~/Documents/projectX y el archivo Rmd en sí está en una subcarpeta \\~/Documents/projectX/markdownfiles/markdown.Rmd, el código read.csv(\"data.csv\") dentro del markdown buscará un archivo csv en la carpeta markdownfiles, y en la carpeta raíz del proyecto donde los scripts dentro de los proyectos normalmente buscarían automáticamente.Para referirse los archivos en otro lugar, tendrá que utilizar la ruta completa del archivo o utilizar el paquete . El paquete establece el directorio de trabajo en la carpeta raíz del proyecto R y se explica en detalle en las páginas de proyectos R e importación y exportación de este manual. Por ejemplo, para importar un archivo llamado “data.csv” desde la carpeta projectX, el código sería import((\"data.csv\")).Ten en cuenta que se recomienda el uso de setwd() en los scripts de R Markdown - sólo se aplica al trozo de código en el que está escrito.Trabajar en una unidad vs tu ordenadorDebido que R Markdown puede tener problemas con pandoc cuando se ejecuta en una unidad de red compartida, se recomienda que la carpeta esté en tu máquina local, por ejemplo, en un proyecto dentro de ‘Mis Documentos’. Si utilizas Git (¡muy recomendable!), esto te resultará familiar. Para más detalles, consulta las páginas del manual sobre R en unidades de red y Errores y ayuda.","code":""},{"path":"reports-with-r-markdown.html","id":"r-markdown-components","chapter":"1 Borrador: Informes con R Markdown","heading":"1.3 Componentes de R Markdown","text":"Un documento R Markdown puede ser editado en RStudio igual que un script estándar de R. Cuando se inicia un nuevo script de R Markdown, RStudio intenta ser útil mostrando una plantilla que explica las diferentes secciones de un script de R Markdown.Lo que aparece continuación es lo que aparece al iniciar un nuevo script Rmd destinado producir una salida html (según la sección anterior).Como puedes ver, hay tres componentes básicos en un archivo Rmd: YAML, texto Markdown y trozos de código R.Estos crearán y se convertirán en la salida de su documento. Consulta el siguiente diagrama:","code":""},{"path":"reports-with-r-markdown.html","id":"yaml-metadata","chapter":"1 Borrador: Informes con R Markdown","heading":"1.3.1 Metadatos YAML","text":"Denominado ‘metadatos YAML’ o simplemente ‘YAML¡, se encuentra en la parte superior del documento R Markdown. Esta sección del script le dirá su archivo Rmd qué tipo de salida producir, preferencias de formato y otros metadatos como el título del documento, el autor y la fecha. Hay otros usos que se mencionan aquí (pero los que se hace referencia en ’Producción de una salida’). Ten en cuenta que la sangría es importante; los tabuladores se aceptan, pero los espacios sí.Esta sección debe comenzar con una línea que contenga sólo tres guiones --- y debe cerrar con una línea que contenga sólo tres guiones ---. Los parámetros YAML vienen en pares clave:valor. La colocación de los dos puntos en YAML es importante - los pares key:value están separados por dos puntos (¡por signos de igualdad!).El YAML debe comenzar con los metadatos del documento. El orden de estos parámetros YAML primarios (sin sangría) importa. Por ejemplo:Puedes utilizar código R en valores YAML escribiéndolo como código en línea (precedido por r entre comillas) pero también entre comillas (véase el ejemplo anterior para date:).En la imagen de arriba, porque hemos clicado en que nuestra salida por defecto sea un archivo html, podemos ver que el YAML dice output: html_document. Sin embargo, también podemos cambiar esto para decir powerpoint_presentation o word_document o incluso pdf_document.","code":"title: \"My document\"\nauthor: \"Me\"\ndate: \"2021-11-19\""},{"path":"reports-with-r-markdown.html","id":"text","chapter":"1 Borrador: Informes con R Markdown","heading":"1.3.2 Texto","text":"Esta es la narrativa de su documento, incluyendo los títulos y encabezados. Está escrito en el lenguaje “markdown”, que se utiliza en muchos programas diferentes.continuación se presentan las formas principales de escribir este texto. Consulta una documentación más extensa disponible en R Markdown “cheatsheet” en el sitio web de RStudio.","code":""},{"path":"reports-with-r-markdown.html","id":"nuevas-líneas","chapter":"1 Borrador: Informes con R Markdown","heading":"Nuevas líneas","text":"Únicamente en R Markdown, para iniciar una nueva línea, introduzca *dos espacios** al final de la línea anterior y luego Enter/Return.","code":""},{"path":"reports-with-r-markdown.html","id":"formato-de-texto","chapter":"1 Borrador: Informes con R Markdown","heading":"Formato de texto","text":"Rodea el texto normal con estos caracteres para cambiar su apariencia en la salida.Guiones bajos (_texto_) o asterisco simple (*texto*) para *poner en cursiva* (itálica)Doble asterisco (**texto**) para el texto en negritaMarcas con acento grave (texto) para mostrar el texto como códigoEl aspecto real de la fuente puede establecerse utilizando plantillas específicas (especificadas en los metadatos YAML; véase el ejemplo de las pestañas).","code":""},{"path":"reports-with-r-markdown.html","id":"color","chapter":"1 Borrador: Informes con R Markdown","heading":"Color","text":"existe un mecanismo sencillo para cambiar el color del texto en R Markdown. Una solución, si tu salida es un archivo HTML, es añadir una línea HTML en el texto de Markdown. El siguiente código HTML imprimirá una línea de texto en negrita roja.PELIGRO: Esto es una advertencia..","code":"<span style=\"color: red;\">**_PELIGRO:_** Esto es una advertencia.<\/span>  "},{"path":"reports-with-r-markdown.html","id":"títulos-y-encabezamientos","chapter":"1 Borrador: Informes con R Markdown","heading":"Títulos y encabezamientos","text":"Un símbolo de almohadilla (hash #) delante de un texto de un script de R Markdown crea un encabezado. Esto es diferente que en un trozo de código R en el script, en el que un símbolo hash es un mecanismo para comentar/anotar/desactivar, como en un script normal de R.Los distintos niveles de encabezamiento se establecen con diferentes números de símbolos de almohadilla al comienzo de una nueva línea. Un símbolo de almohadilla es un título o encabezamiento primario. Dos símbolos hash son un encabezamiento de segundo nivel. Los encabezamientos de tercer y cuarto nivel pueden hacerse con más símbolos hash sucesivamente.","code":"# Encabezamiento / título de primer nivel\n\n## Encabezamiento de segundo nivel\n\n### Encabezamiento de tercer nivel"},{"path":"reports-with-r-markdown.html","id":"viñetas-y-numeración","chapter":"1 Borrador: Informes con R Markdown","heading":"Viñetas y numeración","text":"Utiliza asteriscos (*) para crear una lista de viñetas. Termina la frase anterior, introduce dos espacios, Enter/Return dos veces, y luego comienza tus viñetas. Incluya un espacio entre el asterisco y el texto de su viñeta. Después de cada viñeta, introducea dos espacios y luego Enter/Return. Las sub viñetas funcionan de la misma manera pero con sangría. Los números funcionan de la misma manera, pero en lugar de un asterisco, escrib1 1), 2), etc. continuación se muestra cómo podría ser el texto de tu script de R Markdown.","code":"Aquí están mis viñetas (hay dos espacios después de los dos puntos):\n\n* Viñeta 1 (seguida de dos espacios y Enter/Return)\n* Viñeta 2 (seguida de dos espacios y Enter/Return)\n  * SubViñeta 1 (seguida de dos espacios y Enter/Return)\n  * SubViñeta 2 (seguida de dos espacios y Enter/Return)\n* Subbalanceo 2 (seguido de dos espacios y Enter/Return)"},{"path":"reports-with-r-markdown.html","id":"comentar-el-texto","chapter":"1 Borrador: Informes con R Markdown","heading":"Comentar el texto","text":"Puedes “comentar” el texto de R Markdown del mismo modo que puede utilizar el “#” para comentar una línea de código R en un chunk de R. Simplemente resalta el texto y clica Ctrl+Mayús+c (Cmd+Mayús+c para Mac). El texto estará rodeado de flechas y se volverá verde. aparecerá en tu salida.","code":""},{"path":"reports-with-r-markdown.html","id":"code-chunks","chapter":"1 Borrador: Informes con R Markdown","heading":"1.3.3 Trozos de código (chunks)","text":"Las secciones del script que se dedican ejecutar el código R se denominan “chunks”. Aquí es donde se pueden cargar paquetes, importar datos y realizar la gestión y visualización de datos propiamente dicha. Puedes haber muchos “chunks” de código, por lo que pueden ayudarle organizar su código R en partes, quizás intercaladas con texto. Para tener en cuenta: estos ‘trozos‘ parecerán tener un color de fondo ligeramente diferente al de la parte narrativa del documento.Cada trozo se abre con una línea que comienza con tres marcas de acento grave y corchetes que contienen parámetros para el trozo ({ }). El chunk termina con otros tres tildes de acento grave.Puedes crear un nuevo fragmento escribiendo tú mismo las marcas, utilizando el atajo de teclado “Ctrl + Alt + ” (o Cmd + Shift + r en Mac), o clicando en el icono verde ‘insert new code chunk’ en la parte superior de tu editor de scripts.Algunas notas sobre el contenido de las llaves { }:Empiezan por “r” para indicar que el nombre del idioma dentro del chunk es RDespués de la r puedes escribir opcionalmente un “nombre” de chunk - es necesario pero puede ayudarte organizar tu trabajo. Ten en cuenta que si nombras tus chunks, debes usar SIEMPRE nombres únicos o de lo contrario R se quejará cuando intentes procesarlos.Las llaves pueden incluir también otras opciones, escritas como tag=value, como por ejemploeval = FALSE para ejecutar el código Recho = FALSE para imprimir el código fuente de R del chunk en el documento de salidawarning = FALSE para imprimir las advertencias producidas por el código Rmessage = FALSE para imprimir ningún mensaje producido por el código Rinclude = TRUE/FALSE si se incluyen los resultados de los trozos (por ejemplo, los gráficos) en el documentoout.width = y .height = - proporcionar en estilo .width = \"75%\"fig.align = \"center\" ajustar cómo se alinea una figura en la páginafig.show='hold' si tu chunk imprime múltiples figuras y quieres que se impriman una al lado de la otra (par con .width = c(“33%”, “67%”). También puede establecer como fig.show=‘asis’ para mostrarlas debajo del código que las genera, ‘hide’ para ocultarlas, o ‘animate’ para concatenar varias en una animación.La cabecera de un trozo debe escribirse en una sola líneaIntenta evitar puntos, barras bajas y espacios. Utiliza guiones ( - ) en su lugar si necesitas un separador.Lee más extensamente sobre las opciones de knitr aquí.Algunas de las opciones anteriores pueden configurarse con apuntar y clicar mediante los botones de configuración situados en la parte superior derecha del chunk. Aquí puedes especificar qué partes del chunk quieres que incluya el documento renderizado, es decir, el código, las salidas y las advertencias. Esto aparecerá como preferencias escritas dentro de los corchetes, por ejemplo, echo=FALSE si especifica que quiere ‘Mostrar sólo la salida’.También hay dos flechas en la parte superior derecha de cada trozo, que son útiles para ejecutar el código dentro de un trozo, o todo el código en trozos anteriores. Pasa el cursor por encima de ellas para ver lo que hacen.Para que las opciones globales se apliquen todos los chunks del script, puede configurar esto dentro de su primer chunk de código R en el script. Por ejemplo, para que sólo se muestren las salidas de cada trozo de código y el propio código, puede incluir este comando en el trozo de código R:","code":"\nknitr::opts_chunk$set(echo = FALSE) "},{"path":"reports-with-r-markdown.html","id":"código-r-en-el-texto","chapter":"1 Borrador: Informes con R Markdown","heading":"Código R en el texto","text":"También puede incluir un mínimo de código R dentro de los back-ticks. Dentro de los back-ticks, comience el código con “r” y un espacio, para que RStudio sepa que debe evaluar el código como código R. Vea el ejemplo siguiente.El ejemplo siguiente muestra múltiples niveles de encabezamiento, viñetas, y utiliza el código R para la fecha actual (Sys.Date()) para evaluar en una fecha impresa.El ejemplo anterior es sencillo (muestra la fecha actual), pero utilizando la misma sintaxis puede mostrar valores producidos por un código R más complejo (por ejemplo, para calcular el mínimo, la mediana o el máximo de una columna). También puede integrar objetos R o valores que fueron creados en trozos de código R anteriormente en el script.Como ejemplo, el siguiente script calcula la proporción de casos que tienen menos de 18 años, utilizando funciones tidyverse, y crea los objetos less18, total y less18prop. Este valor dinámico se inserta en el texto posterior. Vemos cómo queda cuando se teje en un documento de Word.","code":""},{"path":"reports-with-r-markdown.html","id":"imágenes-images","chapter":"1 Borrador: Informes con R Markdown","heading":"1.3.4 Imágenes {images}","text":"Puedes incluir imágenes en su R Markdown de dos maneras:Si lo anterior funciona, prueba utilizar knitr::include_graphics()(recuerda que la ruta de tu archivo puede ser escrita usando el paquete )","code":"![](\"path/to/image.png\")  \nknitr::include_graphics(\"path/to/image.png\")\nknitr::include_graphics(here::here(\"path\", \"to\", \"image.png\"))"},{"path":"reports-with-r-markdown.html","id":"tables","chapter":"1 Borrador: Informes con R Markdown","heading":"1.3.5 Tablas","text":"Cree una tabla utilizando guiones ( - ) y barras ( | ). El número de guiones antes/entre las barras permite el número de espacios en la celda antes de que el texto comience envolverse.El código anterior produce la siguiente tabla:","code":"Columna 1 |Columna  2 |Columna 3\n----------|-----------|--------\nCelda A   |Celda B    |Celda C\nCelda D   |Celda E    |Celda F"},{"path":"reports-with-r-markdown.html","id":"tabbed-sections","chapter":"1 Borrador: Informes con R Markdown","heading":"1.3.6 Secciones con pestañas","text":"Para las salidas HTML, puedes organizar las secciones con “pestañas”. Basta con añadir .tabset en las llaves { } que se colocan después de un encabezamiento. Todos los subtítulos debajo de ese encabezado (hasta otro encabezado del mismo nivel) aparecerán como pestañas en las que el usuario puedes clicar. Lee más aquíPuedes añadir una opción adicional .tabset-pills después de .tabset para dar las propias etiquetas una apariencia “en forma de píldora”. Ten en cuenta que al ver la salida HTML con etiquetas, la funcionalidad de búsqueda Ctrl+f sólo buscará en las etiquetas “activas”, en las ocultas.","code":""},{"path":"reports-with-r-markdown.html","id":"file-structure","chapter":"1 Borrador: Informes con R Markdown","heading":"1.4 Estructura de los archivos","text":"several ways structure R Markdown associated R scripts. advantages disadvantages:Self-contained R Markdown - everything needed report imported created within R Markdown\nSource files - can run external R scripts source() command use outputs Rmd\nChild scripts - alternate mechanism source()\nSource files - can run external R scripts source() command use outputs RmdChild scripts - alternate mechanism source()Utilize “runfile” - Run commands R script prior rendering R Markdown","code":""},{"path":"reports-with-r-markdown.html","id":"self-contained-rmd","chapter":"1 Borrador: Informes con R Markdown","heading":"1.4.1 Rmd autónomo","text":"Para un informe relativamente sencillo, puedes optar por organizar tu script de R Markdown de manera que sea “autocontenido” y implique ningún script externo.Todo lo que necesitas para ejecutar el R Markdown se importa o se crea dentro del archivo Rmd, incluyendo todos los trozos de código y la carga de paquetes. Este enfoque “autocontenido” es apropiado cuando necesitas hacer mucho procesamiento de datos (por ejemplo, traer un archivo de datos limpio o semilimpio) y la representación del R Markdown tomará demasiado tiempo.En este escenario, una organización lógica del script de R Markdown podría ser:Establecer las opciones globales de knitrCargar paquetesImportar datosProcesar los datosProducir resultados (tablas, gráficos, etc.)Guardar los resultados, si procede (.csv, .png, etc.)","code":""},{"path":"reports-with-r-markdown.html","id":"source-other-files","chapter":"1 Borrador: Informes con R Markdown","heading":"Source other files","text":"Una variación del enfoque “autocontenido” es hacer que los trozos de código R Markdown “originen” (ejecuten) otros scripts R. Esto puede hacer que tu script de R Markdown sea menos desordenado, más simple y más fácil de organizar. También puede ayudar si quieres mostrar las cifras finales al principio del informe. En este enfoque, el script de R Markdown final simplemente combina las salidas preprocesadas en un documento.Una forma de hacerlo es proporcionando los scripts de R (ruta del archivo y nombre con extensión) al comando R base source().Ten en cuenta que cuando se utiliza source() dentro de R Markdown, los archivos externos se seguirán ejecutando durante el curso del procesamiento de tu archivo Rmd. Por lo tanto, cada script se ejecuta cada vez que se procesa el informe. Por lo tanto, tener estos comandos source() dentro del R Markdown acelera el tiempo de ejecución, ni ayuda mucho la depuración, ya que el error producido todavía se imprimirá al producir el R Markdown.Una alternativa es utilizar la opción child = knitr. EXPLICAR MÁS PARA HACERDebes ser consciente de los distintos entorno de R. Los objetos creados dentro de un entorno estarán necesariamente disponibles para el entorno utilizado por R Markdown.","code":"\nsource(\"your-script.R\", local = knitr::knit_global())\n# or sys.source(\"your-script.R\", envir = knitr::knit_global())"},{"path":"reports-with-r-markdown.html","id":"runfile","chapter":"1 Borrador: Informes con R Markdown","heading":"1.4.2 Ejecutar archivo","text":"Este enfoque implica utilizar el script de R que contiene el comando(s) render() para preprocesar los objetos que se introducen en el R markdown.Por ejemplo, puede cargar los paquetes, cargar y limpiar los datos, e incluso crear los gráficos de interés antes de render(). Estos pasos pueden ocurrir en el script de R, o en otros scripts que se originan. Siempre y cuando estos comandos ocurran en la misma sesión de RStudio y los objetos se guarden en el entorno, los objetos pueden ser llamados dentro del contenido de Rmd. Entonces el propio R markdown sólo se utilizará para el paso final - para producir la salida con todos los objetos pre-procesados. Esto es mucho más fácil de depurar si algo va mal.Este enfoque es útil por las siguientes razones:Mensajes de error más informativos - estos mensajes serán generados por el script de R, por el R Markdown. Los errores de R Markdown tienden decirle qué trozo tuvo un problema, pero le dirán qué línea.Si procede, puede ejecutar pasos de procesamiento largos antes del comando render() - se ejecutarán sólo una vez.En el ejemplo siguiente, tenemos un script de R separado en el que preprocesamos un objeto de datos en el entorno de R y luego procesamos “create_output.Rmd” usando render().","code":"\ndata <- import(\"datafile.csv\") %>%       # Load data and save to environment\n  select(age, hospital, weight)          # Select limited columns\n\nrmarkdown::render(input = \"create_output.Rmd\")   # Create Rmd file"},{"path":"reports-with-r-markdown.html","id":"folder-structure","chapter":"1 Borrador: Informes con R Markdown","heading":"1.4.3 Estructura de carpetas","text":"El flujo de trabajo también se refiere la estructura general de las carpetas, como tener una carpeta de ‘salida’ para los documentos y figuras creados, y carpetas de ‘datos’ o ‘entradas’ para los datos depurados. entramos en más detalles aquí, pero echa un vistazo la página de organización de los informes rutinarios.","code":""},{"path":"reports-with-r-markdown.html","id":"producing-the-document","chapter":"1 Borrador: Informes con R Markdown","heading":"1.5 Producir el documento","text":"Puedes elaborar el documento de las siguientes maneras:Manualmente clicando sobre el botón “Knit” en la parte superior del editor de scripts de RStudio (rápido y fácil)Ejecutar el comando render() (ejecutado fuera del script de R Markdown)","code":""},{"path":"reports-with-r-markdown.html","id":"option-1-knit-button","chapter":"1 Borrador: Informes con R Markdown","heading":"1.5.1 Opción 1: botón “Knit”","text":"Cuando tengas el archivo Rmd abierto, clica el botón ‘Knit’ en la parte superior del archivo.R Studio le mostrará el progreso dentro de una pestaña ‘R Markdown’ cerca de su consola R. El documento se abrirá automáticamente cuando esté completo.El documento se guardará en la misma carpeta que su script de R markdown, y con el mismo nombre de archivo (aparte de la extensión). Obviamente, esto es ideal para el control de versiones (se sobreescribirá cada vez que se haga un punto, menos que se mueva manualmente), ya que entonces puede que tengas que renombrar el archivo (por ejemplo, añadir una fecha).Este es el botón de acceso directo de RStudio para la función render() de rmarkdown. Este enfoque sólo es compatible con un R markdown autocontenido, donde todos los componentes necesarios existen o se originan dentro del archivo.","code":""},{"path":"reports-with-r-markdown.html","id":"option-2-render-command","chapter":"1 Borrador: Informes con R Markdown","heading":"1.5.2 Opción 2: comando render()","text":"Otra forma de producir su salida de R Markdown es ejecutar la función render() (del paquete rmarkdown). Debe ejecutar este comando fuera del script de R Markdown, ya sea en un script de R separado (menudo llamado “archivo de ejecución”), o como un comando independiente en la consola de R.Al igual que con “knit”, la configuración por defecto guardará la salida Rmd en la misma carpeta que el script Rmd, con el mismo nombre de archivo (aparte de la extensión del archivo). Por ejemplo, “mi_informe.Rmd” cuando se procese creará “mi_informe.docx” si se procesa en un documento de Word. Sin embargo, al usar render() tiene la opción de usar diferentes configuraciones. render() puede aceptar argumentos que incluyen:output_format = Este es el formato de salida al que se va convertir (por ejemplo, \"html_document\", \"pdf_document\", \"word_document\", o \"\"). También puede especificar esto en el YAML dentro del script de R Markdown.output_file = Este es el nombre del archivo de salida (y la ruta del archivo). Se puede crear través de funciones de R como () o str_glue() como se demuestra continuación.output_dir =Este es un directorio de salida (carpeta) para guardar el archivo. Esto le permite elegir una alternativa distinta al directorio en el que se guarda el archivo Rmd.output_options = Puedes proporcionar una lista de opciones que anulen las del YAML del script (por ejemplo )output_yaml = Puedes proporcionar la ruta un archivo .yml que contenga las especificaciones YAMLparams = Ver la sección de parámetros más abajoVer la lista completa aquíComo ejemplo, para mejorar el control de versiones, el siguiente comando guardará el archivo de salida dentro de una subcarpeta ‘outputs’, con la fecha actual en el nombre del archivo. Para crear el nombre del archivo, se utiliza la función str_glue() del paquete stringr para “pegar” las cadenas estáticas (escritas sin formato) con el código dinámico de R (escrito entre llaves). Por ejemplo, si es 10 de abril de 2021, el nombre del archivo de abajo será “Informe_2021-04-10.docx”. Consulta la página sobre Caracteres y cadenas para obtener más detalles sobre str_glue().medida que el archivo se procesa, la consola de RStudio mostrará el progreso hasta el 100%, y un mensaje final para indicar que se ha completado.","code":"\nrmarkdown::render(input = \"my_report.Rmd\")\nrmarkdown::render(\n  input = \"create_output.Rmd\",\n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\")) "},{"path":"reports-with-r-markdown.html","id":"options-3-reportfactory-package","chapter":"1 Borrador: Informes con R Markdown","heading":"1.5.3 Opción 3: paquete reportfactory","text":"El paquete de R reportfactory ofrece un método alternativo de organización y compilación de informes R Markdown para situaciones en las que se ejecutan informes de forma rutinaria (por ejemplo, diariamente, semanalmente…). Facilita la compilación de múltiples archivos R Markdown y la organización de sus resultados. En esencia, proporciona una “fábrica” desde la que se pueden ejecutar los informes R Markdown, obtener automáticamente carpetas con fecha y hora para los resultados, y tener un control de versiones “ligero”.Lea más sobre este flujo de trabajo en la página sobre la organización de los informes de rutina.","code":""},{"path":"reports-with-r-markdown.html","id":"parameterised-reports","chapter":"1 Borrador: Informes con R Markdown","heading":"1.6 Informes parametrizados","text":"Puedes utilizar la parametrización para hacer que un informe sea dinámico, de forma que pueda ejecutarse con una configuración específica (por ejemplo, una fecha o lugar concretos o con determinadas opciones de tejido). continuación, nos centramos en los aspectos básicos, pero hay más detalles en línea sobre los informes parametrizados.Utilizando linelist del ébola como ejemplo, digamos que queremos ejecutar un informe de vigilancia estándar para cada hospital cada día. Mostramos cómo se puede hacer esto usando parámetros.Importante: los informes dinámicos también son posibles sin la estructura formal de parámetros (sin params:), utilizando simples objetos R en un script adyacente de R. Esto se explica al final de esta sección.","code":""},{"path":"reports-with-r-markdown.html","id":"setting-parameters","chapter":"1 Borrador: Informes con R Markdown","heading":"1.6.1 Establecer parámetros","text":"Tienes varias opciones para especificar los valores de los parámetros para tu salida de R Markdown.","code":""},{"path":"reports-with-r-markdown.html","id":"opción-1-establecer-parámetros-dentro-de-yaml","chapter":"1 Borrador: Informes con R Markdown","heading":"Opción 1: Establecer parámetros dentro de YAML","text":"Edite el YAML para incluir una opción params:, con declaraciones sangradas para cada parámetro que desee definir. En este ejemplo creamos los parámetros date y hospital, para los que especificamos valores. Estos valores están sujetos cambios cada vez que se ejecuta el informe. Si utiliza el botón “Knit” para producir la salida, los parámetros tendrán estos valores por defecto. Del mismo modo, si utiliza render() los parámetros tendrán estos valores por defecto menos que se especifique lo contrario en el comando render().En el fondo, estos valores de los parámetros están contenidos en una lista de sólo lectura llamada params. Así, puedes insertar los valores de los parámetros en el código de R como lo haría con otro objeto/valor de R en tu entorno. Simplemente escriba params$ seguido del nombre del parámetro. Por ejemplo params$hospital para representar el nombre del hospital (“Hospital Central” por defecto).Ten en cuenta que los parámetros también pueden tener valores true o false, y por lo tanto estos pueden ser incluidos en sus opciones de knitr para un chunk de R. Por ejemplo, puedes establecer {r, eval=params$run} en lugar de {r, eval=FALSE}, y ahora si el chunk se ejecuta o depende del valor de un parámetro run:.Ten en cuenta que para los parámetros que son fechas, serán introducidos como una cadena. Por lo tanto, para que params$date se interprete en el código de R, es probable que tenga que ser envuelto con .Date() o una función similar para convertir al tipo Date.","code":"---\ntitle: Informe de vigilancia\noutput: html_document\nparams:\n date: 2021-04-10\n hospital: Hospital Central\n---"},{"path":"reports-with-r-markdown.html","id":"opción-2-establecer-los-parámetros-dentro-de-render","chapter":"1 Borrador: Informes con R Markdown","heading":"Opción 2: Establecer los parámetros dentro de render()","text":"Como se ha mencionado anteriormente, como alternativa clicar el botón “Knit” para producir la salida es ejecutar la función render() desde un script independiente. En este último caso, se pueden especificar los parámetros utilizar con el argumento params = de render().Ten en cuenta que los valores de los parámetros proporcionados aquí sobrescribirán sus valores por defecto si se escriben en el YAML. Escribimos los valores entre comillas ya que en este caso deben ser definidos como valores de carácter/cadena.El siguiente comando renderiza “surveillance_report.Rmd”, especifica un nombre de archivo de salida dinámico y una carpeta, y proporciona un list() de dos parámetros y sus valores al argumento params =.","code":"\nrmarkdown::render(\n  input = \"surveillance_report.Rmd\",  \n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\"),\n  params = list(date = \"2021-04-10\", hospital  = \"Central Hospital\"))"},{"path":"reports-with-r-markdown.html","id":"opción-3-establecer-los-parámetros-mediante-una-interfaz-gráfica-de-usuario","chapter":"1 Borrador: Informes con R Markdown","heading":"Opción 3: Establecer los parámetros mediante una interfaz gráfica de usuario","text":"Para obtener una sensación más interactiva, también puedes utilizar la interfaz gráfica de usuario (GUI) para seleccionar manualmente los valores de los parámetros. Para ello, podemos clicar en el menú desplegable situado junto al botón ‘Knit’ y elegir ‘Knit parameters’.Aparecerá una ventana emergente que permitirá introducir los valores de los parámetros establecidos en el YAML del documento.Puedes lograr lo mismo través de un comando render() especificando params = \"ask\", como se demuestra continuación.Sin embargo, la introducción de valores en esta ventana emergente está sujeta errores y faltas de ortografía. Es posible que prefiera añadir restricciones los valores que se pueden introducir través de los menús desplegables. Puedes hacerlo añadiendo en el YAML varias especificaciones para cada entrada params:.label: es como el título para ese menú desplegable en particularvalue: es el valor por defecto (inicial)input: establecer select para el menú desplegablechoices: Indique los valores elegibles en el menú desplegableA continuación, estas especificaciones están escritas para el parámetro hospitalAl procesarlo (con el botón ‘knit parameters’ o con render()), la ventana emergente tendrá opciones desplegables para seleccionarlos.","code":"rmarkdown::render(\n  input = \"surveillance_report.Rmd\",  \n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\"),\n  params = “ask”)---\ntitle: Surveillance report\noutput: html_document\nparams:\n date: 2021-04-10\n hospital: \n  label: “Town:”\n  value: Central Hospital\n  input: select\n  choices: [Central Hospital, Military Hospital, Port Hospital, St. Mark's Maternity Hospital (SMMH)]\n---"},{"path":"reports-with-r-markdown.html","id":"parameterized-example","chapter":"1 Borrador: Informes con R Markdown","heading":"1.6.2 Ejemplo parametrizado","text":"El siguiente código crea parámetros para date y hospital, que se utilizan en el R Markdown como params$date y params$hospital, respectivamente.En la salida del informe resultante, vea cómo los datos se filtran al hospital específico, y el título del gráfico se refiere al hospital y la fecha correctos. En este caso utilizamos el archivo “linelist_cleaned.rds”, pero sería especialmente adecuado que la propia lista de líneas tuviera también un sello de fecha para alinearse con la fecha parametrizada.Si se procesa esto se obtiene la salida final con la fuente y el diseño por defecto.","code":""},{"path":"reports-with-r-markdown.html","id":"parameterisation-without-params","chapter":"1 Borrador: Informes con R Markdown","heading":"1.6.3 Parametrización sin parámetros","text":"Si estás procesazando un archivo R Markdown con render() desde un script separado, puede realmente crear el impacto de la parametrización sin usar la funcionalidad params:.Por ejemplo, en el script de R que contiene el comando render(), puedes simplemente definir hospital y date como dos objetos R (valores) antes del comando render(). En el R Markdown, sería necesario tener una sección params: en el YAML, y nos referiríamos al objeto date en lugar de params$date y hospital en lugar de params$hospital.Seguir este enfoque significa que se puede procesar con “knit parameters”, ni utilizar la interfaz gráfica , ni incluir opciones de procesamiento dentro de los parámetros. Sin embargo, permite simplificar el código, lo que puede ser ventajoso.","code":"\n# This is a R script that is separate from the R Markdown\n\n# define R objects\nhospital <- \"Central Hospital\"\ndate <- \"2021-04-10\"\n\n# Render the R markdown\nrmarkdown::render(input = \"create_output.Rmd\") "},{"path":"reports-with-r-markdown.html","id":"looping-reports","chapter":"1 Borrador: Informes con R Markdown","heading":"1.7 Informes en bucle","text":"Es posible que queramos ejecutar un informe varias veces, variando los parámetros de entrada, para producir un informe para cada jurisdicción/unidad. Esto puede hacerse utilizando herramientas para la iteración, que se explican en detalle en la página sobre Iteración, bucles y listas. Las opciones incluyen el paquete purrr, o el uso de un bucle como se explica continuación.continuación, utilizamos un simple bucle para generar un informe de vigilancia para todos los hospitales de interés. Esto se hace con un solo comando (en lugar de cambiar manualmente el parámetro del hospital uno por uno). El comando para generar los informes debe existir en un script separado fuera del informe Rmd. Este script también contendrá objetos definidos para “hacer un bucle” - la fecha de hoy, y un vector de nombres de hospitales para hacer un bucle.feed values one---time render() command using loop, runs command value hospitals vector. letter represents index position (1 4) hospital currently used iteration, hospital_list[1] “Central Hospital”. information supplied two places render() command:file name, file name first iteration produced 10th April 2021 “Report_Central Hospital_2021-04-10.docx”, saved ‘output’ subfolder working directory.params = Rmd uses hospital name internally whenever params$hospital value called (e.g. filter dataset particular hospital ). example, four files created - one hospital.","code":"\nhospitals <- c(\"Central Hospital\",\n                \"Military Hospital\", \n                \"Port Hospital\",\n                \"St. Mark's Maternity Hospital (SMMH)\") \nfor(i in 1:length(hospitals)){\n  rmarkdown::render(\n    input = \"surveillance_report.Rmd\",\n    output_file = str_glue(\"output/Report_{hospitals[i]}_{Sys.Date()}.docx\"),\n    params = list(hospital  = hospitals[i]))\n}       "},{"path":"reports-with-r-markdown.html","id":"templates","chapter":"1 Borrador: Informes con R Markdown","heading":"1.8 Plantillas","text":"Utilizando un documento de plantilla que contenga cualquier formato deseado, puede ajustar la estética del aspecto de la salida Rmd. Puedes crear, por ejemplo, un archivo de MS Word o Powerpoint que contenga páginas/diapositivas con las dimensiones, marcas de agua, fondos y fuentes deseadas.","code":""},{"path":"reports-with-r-markdown.html","id":"word-documents","chapter":"1 Borrador: Informes con R Markdown","heading":"1.8.1 Documentos de Word","text":"Para crear una plantilla, inicia un nuevo documento de Word (o utiliza uno ya existente con el formato que le convenga), y edita las fuentes definiendo los Estilos. En el Estilo, los encabezados 1, 2 y 3 se refieren los distintos niveles de encabezado de markdown (# Header 1, ## Header 2 ### Header 3 respectivamente). Clica con el botón derecho en el estilo y clica en ‘modificar’ para cambiar el formato de la fuente, así como el párrafo (por ejemplo, podés introducir saltos de página antes de ciertos estilos que pueden ayudar con el espaciado). Otros aspectos del documento de Word, como los márgenes, el tamaño de la página, los encabezados, etc., pueden modificarse como un documento de Word normal en el que se trabaja directamente.","code":""},{"path":"reports-with-r-markdown.html","id":"powerpoint-documents","chapter":"1 Borrador: Informes con R Markdown","heading":"1.8.2 Documentos Powerpoint","text":"Como en el caso anterior, crea un nuevo conjunto de diapositivas o utiliza un archivo PowerPoint existente con el formato deseado. Para seguir editando, clica en “Ver” y “Patrón de diapositivas”. Desde aquí puede cambiar la apariencia de la diapositiva “maestra” editando el formato del texto en los cuadros de texto, así como las dimensiones del fondo/página para la página en general.Desgraciadamente, la edición de archivos PowerPoint es algo menos flexible:Un encabezado de primer nivel (# Header 1) se convertirá automáticamente en el título de una nueva diapositiva,El texto del # Header 2 aparecerá como subtítulo, sino como texto dentro del cuadro de texto principal de la diapositiva (menos que encuentre una manera de maniplar la vista del Patrón).Los gráficos y las tablas resultantes irán automáticamente nuevas diapositivas. Tendrá que combinarlos, por ejemplo con la función patchwork para combinar ggplots, para que aparezcan en la misma página. Vea esta entrada del blog sobre el uso del paquete patchwork para poner múltiples imágenes en una diapositiva.En el paquete oficcer  encontrará una herramienta para trabajar más fondo con las presentaciones de PowerPoint.","code":""},{"path":"reports-with-r-markdown.html","id":"integrating-templates-into-the-yaml","chapter":"1 Borrador: Informes con R Markdown","heading":"1.8.3 Integración de plantillas en el YAML","text":"Una vez preparada la plantilla, el detalle de la misma puede añadirse en el YAML del Rmd debajo de la línea ‘output’ y debajo de donde se especifica el tipo de documento (que va una línea separada en sí). Ten en cuenta que reference_doc se puede utilizar para las plantillas de diapositivas de PowerPoint.Lo más fácil es guardar la plantilla en la misma carpeta en la que está el archivo Rmd (como en el ejemplo siguiente), o en una subcarpeta dentro de ella","code":"---\ntitle: Surveillance report\noutput: \n word_document:\n  reference_docx: \"template.docx\"\nparams:\n date: 2021-04-10\n hospital: Central Hospital\ntemplate:\n \n---"},{"path":"reports-with-r-markdown.html","id":"formatting-html-files","chapter":"1 Borrador: Informes con R Markdown","heading":"1.8.4 Formateo de archivos HTML","text":"Los archivos HTML utilizan plantillas, pero pueden tener los estilos configurados dentro del YAML. Los HTML son documentos interactivos, y son particularmente flexibles. Aquí cubrimos algunas opciones básicas.Tabla de contenidos: Podemos añadir una tabla de contenidos con toc: true continuación, y también especificar que permanezca visible (“flotante”) al desplazarse, con toc_float: true.Tabla de contenidos: Podemos añadir una tabla de contenidos con toc: true continuación, y también especificar que permanezca visible (“flotante”) al desplazarse, con toc_float: true.Temas: Podemos referirnos algunos temas prefabricados, que provienen de una biblioteca de temas de Bootswatch. En el siguiente ejemplo utilizamos cerulean. Otras opciones son: journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex y yeti.Temas: Podemos referirnos algunos temas prefabricados, que provienen de una biblioteca de temas de Bootswatch. En el siguiente ejemplo utilizamos cerulean. Otras opciones son: journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex y yeti.Resaltar: Configurando esto se cambia el aspecto del texto resaltado (por ejemplo, el código dentro de los trozos que se muestran). Los estilos soportados son default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark y textmate.Resaltar: Configurando esto se cambia el aspecto del texto resaltado (por ejemplo, el código dentro de los trozos que se muestran). Los estilos soportados son default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark y textmate.aquí un ejemplo de cómo integrar las opciones anteriores en el YAML.continuación se muestran dos ejemplos de salidas HTML que tienen ambas tablas de contenido flotantes, pero diferentes estilos de tema y resaltado seleccionados:","code":"---\ntitle: \"HTML example\"\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    theme: cerulean\n    highlight: kate\n    \n---"},{"path":"reports-with-r-markdown.html","id":"dynamic-content","chapter":"1 Borrador: Informes con R Markdown","heading":"1.9 Contenido dinámico","text":"En una salida HTML, el contenido de tu informe puede ser dinámico. continuación, algunos ejemplos:","code":""},{"path":"reports-with-r-markdown.html","id":"tables-1","chapter":"1 Borrador: Informes con R Markdown","heading":"1.9.1 Tablas","text":"En un informe HTML, se puede imprimir un dataframe / tibbles de manera que el contenido sea dinámico, con filtros y barras de desplazamiento. Hay varios paquetes que ofrecen esta capacidad.Para hacer esto con el paquete DT, como se utiliza lo largo de este manual, se puede insertar un trozo de código como este:La función datatable() imprimirá el dataframe proporcionado como una tabla dinámica para el lector. Puedes establecer rownames = FALSE para simplificar el extremo izquierdo de la tabla. filter = \"top\" proporciona un filtro sobre cada columna. En el argumento option() proporciona una lista de otras especificaciones. continuación incluimos dos: pageLength = 5 establece el número de filas que aparecen como 5 (las filas restantes se pueden ver paginando través de flechas), y scrollX=TRUE habilita una barra de desplazamiento en la parte inferior de la tabla (para las columnas que se extienden demasiado la derecha).Si tu conjunto de datos es muy grande, considera la posibilidad de mostrar sólo las X filas superiores envolviendo el dataframe en head().","code":""},{"path":"reports-with-r-markdown.html","id":"html-widgets","chapter":"1 Borrador: Informes con R Markdown","heading":"1.9.2 #Widgets HTML","text":"Los widgets HTML para R son un tipo especial de paquetes de R que permiten una mayor interactividad utilizando bibliotecas de JavaScript. Puedes incrustarlos en salidas HTML R Markdown.Algunos ejemplos comunes de estos widgets son:Plotly (utilizado en la página de este manual y en la página de [Plots interativos])visNetwork (utilizado en la página de cadenas de transmisión de este manual)Leaflet (Folleto) (utilizado en la página de fundamentos del SIG de este manual)dygraphs (útil para mostrar interactivamente los datos de las series temporales)DT (datatable()) (se utiliza para mostrar tablas dinámicas con filtro, ordenación, etc.)La función ggplotly() de plotly es particularmente fácil de usar. Consulta la página de gráficos interactivos.","code":""},{"path":"reports-with-r-markdown.html","id":"recursos-resources","chapter":"1 Borrador: Informes con R Markdown","heading":"1.10 Recursos {#resources","text":"Puedes encontrar más información en:https://bookdown.org/yihui/rmarkdown/https://rmarkdown.rstudio.com/articles_intro.htmlUna buena explicación de markdown vs knitr vs Rmarkdown está aquí: https://stackoverflow.com/questions/40563479/relationship--r-markdown-knitr-pandoc--bookdown","code":""}]
